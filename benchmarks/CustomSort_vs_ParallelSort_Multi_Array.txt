Starting ArraySorter Benchmark...

Benchmark Parameters:
java ArraySorterBenchmark -warmup 5 -timed 10 -iterations 50 -lengths 100000,1000000,10000000 -types Random Wide,Random Narrow,Nearly Sorted,Reverse Sorted,High Variance,Small Numbers,Large Numbers,Equal Distrib,Unequal Distrib -algorithms custom.sorts.CustomSort::sort,java.util.Arrays::parallelSort


iteration 1/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     2.4835                              1.9426                              Winner: java.util.Arrays::parallelSort, faster by 21.78%
Random Narrow       100000     1.8980                              1.7296                              Winner: java.util.Arrays::parallelSort, faster by 8.87%
Nearly Sorted       100000     0.8063                              0.9471                              Winner: custom.sorts.CustomSort::sort, faster by 14.87%
Reverse Sorted      100000     0.6464                              0.3971                              Winner: java.util.Arrays::parallelSort, faster by 38.57%
High Variance       100000     1.6620                              1.8760                              Winner: custom.sorts.CustomSort::sort, faster by 11.41%
Small Numbers       100000     1.6484                              1.8799                              Winner: custom.sorts.CustomSort::sort, faster by 12.32%
Large Numbers       100000     1.5935                              1.7734                              Winner: custom.sorts.CustomSort::sort, faster by 10.15%
Equal Distrib       100000     1.7415                              1.7862                              Winner: custom.sorts.CustomSort::sort, faster by 2.50%
Unequal Distrib     100000     1.7241                              1.7300                              Winner: custom.sorts.CustomSort::sort, faster by 0.34%
Random Wide         1000000    16.6953                             18.1072                             Winner: custom.sorts.CustomSort::sort, faster by 7.80%
Random Narrow       1000000    15.8659                             16.8519                             Winner: custom.sorts.CustomSort::sort, faster by 5.85%
Nearly Sorted       1000000    6.4010                              7.6628                              Winner: custom.sorts.CustomSort::sort, faster by 16.47%
Reverse Sorted      1000000    0.9791                              1.4774                              Winner: custom.sorts.CustomSort::sort, faster by 33.73%
High Variance       1000000    17.0436                             17.6646                             Winner: custom.sorts.CustomSort::sort, faster by 3.52%
Small Numbers       1000000    16.4820                             18.0110                             Winner: custom.sorts.CustomSort::sort, faster by 8.49%
Large Numbers       1000000    16.4102                             16.1144                             Winner: java.util.Arrays::parallelSort, faster by 1.80%
Equal Distrib       1000000    16.3667                             18.5133                             Winner: custom.sorts.CustomSort::sort, faster by 11.59%
Unequal Distrib     1000000    16.1709                             16.7510                             Winner: custom.sorts.CustomSort::sort, faster by 3.46%
Random Wide         10000000   196.3085                            195.6192                            Winner: java.util.Arrays::parallelSort, faster by 0.35%
Random Narrow       10000000   183.9824                            185.2065                            Winner: custom.sorts.CustomSort::sort, faster by 0.66%
Nearly Sorted       10000000   69.3124                             79.8110                             Winner: custom.sorts.CustomSort::sort, faster by 13.15%
Reverse Sorted      10000000   6.0789                              14.1662                             Winner: custom.sorts.CustomSort::sort, faster by 57.09%
High Variance       10000000   180.9261                            211.1968                            Winner: custom.sorts.CustomSort::sort, faster by 14.33%
Small Numbers       10000000   198.0715                            183.4650                            Winner: java.util.Arrays::parallelSort, faster by 7.37%
Large Numbers       10000000   182.7735                            185.8068                            Winner: custom.sorts.CustomSort::sort, faster by 1.63%
Equal Distrib       10000000   186.6097                            184.4753                            Winner: java.util.Arrays::parallelSort, faster by 1.14%
Unequal Distrib     10000000   175.7917                            175.2672                            Winner: java.util.Arrays::parallelSort, faster by 0.30%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.07                    19/1350 wins   
java.util.Arrays::parallelSort     10.02                    8/1350 wins    

Overall Winner: custom.sorts.CustomSort::sort       2.05% better than java.util.Arrays::parallelSort     



iteration 2/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.5879                              1.8031                              Winner: custom.sorts.CustomSort::sort, faster by 11.94%
Random Narrow       100000     1.6123                              1.7731                              Winner: custom.sorts.CustomSort::sort, faster by 9.07%
Nearly Sorted       100000     0.7713                              0.7231                              Winner: java.util.Arrays::parallelSort, faster by 6.24%
Reverse Sorted      100000     0.1609                              0.1430                              Winner: java.util.Arrays::parallelSort, faster by 11.11%
High Variance       100000     1.6791                              1.8779                              Winner: custom.sorts.CustomSort::sort, faster by 10.59%
Small Numbers       100000     1.6423                              1.6978                              Winner: custom.sorts.CustomSort::sort, faster by 3.27%
Large Numbers       100000     1.7299                              1.6737                              Winner: java.util.Arrays::parallelSort, faster by 3.25%
Equal Distrib       100000     1.6455                              1.8267                              Winner: custom.sorts.CustomSort::sort, faster by 9.92%
Unequal Distrib     100000     1.6544                              1.8581                              Winner: custom.sorts.CustomSort::sort, faster by 10.96%
Random Wide         1000000    16.2719                             16.1951                             Winner: java.util.Arrays::parallelSort, faster by 0.47%
Random Narrow       1000000    16.5794                             18.4816                             Winner: custom.sorts.CustomSort::sort, faster by 10.29%
Nearly Sorted       1000000    6.0648                              7.1511                              Winner: custom.sorts.CustomSort::sort, faster by 15.19%
Reverse Sorted      1000000    0.8264                              1.4213                              Winner: custom.sorts.CustomSort::sort, faster by 41.86%
High Variance       1000000    17.6296                             16.8677                             Winner: java.util.Arrays::parallelSort, faster by 4.32%
Small Numbers       1000000    15.4348                             17.5673                             Winner: custom.sorts.CustomSort::sort, faster by 12.14%
Large Numbers       1000000    16.3038                             16.7158                             Winner: custom.sorts.CustomSort::sort, faster by 2.46%
Equal Distrib       1000000    15.4376                             16.6585                             Winner: custom.sorts.CustomSort::sort, faster by 7.33%
Unequal Distrib     1000000    16.0267                             22.2152                             Winner: custom.sorts.CustomSort::sort, faster by 27.86%
Random Wide         10000000   181.8318                            188.9088                            Winner: custom.sorts.CustomSort::sort, faster by 3.75%
Random Narrow       10000000   196.1944                            180.1341                            Winner: java.util.Arrays::parallelSort, faster by 8.19%
Nearly Sorted       10000000   68.2136                             81.1668                             Winner: custom.sorts.CustomSort::sort, faster by 15.96%
Reverse Sorted      10000000   6.2541                              14.0481                             Winner: custom.sorts.CustomSort::sort, faster by 55.48%
High Variance       10000000   177.5103                            193.6390                            Winner: custom.sorts.CustomSort::sort, faster by 8.33%
Small Numbers       10000000   180.2827                            209.3518                            Winner: custom.sorts.CustomSort::sort, faster by 13.89%
Large Numbers       10000000   197.8169                            199.2284                            Winner: custom.sorts.CustomSort::sort, faster by 0.71%
Equal Distrib       10000000   201.4381                            191.6365                            Winner: java.util.Arrays::parallelSort, faster by 4.87%
Unequal Distrib     10000000   185.0889                            204.4147                            Winner: custom.sorts.CustomSort::sort, faster by 9.45%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      13.07                    39/1350 wins   
java.util.Arrays::parallelSort     7.91                     15/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       5.16% better than java.util.Arrays::parallelSort     



iteration 3/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.7429                              1.9484                              Winner: custom.sorts.CustomSort::sort, faster by 10.55%
Random Narrow       100000     1.6414                              1.6895                              Winner: custom.sorts.CustomSort::sort, faster by 2.85%
Nearly Sorted       100000     0.6537                              0.7276                              Winner: custom.sorts.CustomSort::sort, faster by 10.16%
Reverse Sorted      100000     0.1539                              0.1482                              Winner: java.util.Arrays::parallelSort, faster by 3.74%
High Variance       100000     1.7497                              1.7089                              Winner: java.util.Arrays::parallelSort, faster by 2.34%
Small Numbers       100000     1.5490                              1.7135                              Winner: custom.sorts.CustomSort::sort, faster by 9.60%
Large Numbers       100000     1.7500                              1.7655                              Winner: custom.sorts.CustomSort::sort, faster by 0.88%
Equal Distrib       100000     1.7915                              1.9680                              Winner: custom.sorts.CustomSort::sort, faster by 8.97%
Unequal Distrib     100000     2.1009                              1.9463                              Winner: java.util.Arrays::parallelSort, faster by 7.36%
Random Wide         1000000    17.2591                             17.8300                             Winner: custom.sorts.CustomSort::sort, faster by 3.20%
Random Narrow       1000000    17.0885                             19.3200                             Winner: custom.sorts.CustomSort::sort, faster by 11.55%
Nearly Sorted       1000000    6.2889                              7.4561                              Winner: custom.sorts.CustomSort::sort, faster by 15.65%
Reverse Sorted      1000000    0.8369                              1.4217                              Winner: custom.sorts.CustomSort::sort, faster by 41.13%
High Variance       1000000    16.1737                             17.2984                             Winner: custom.sorts.CustomSort::sort, faster by 6.50%
Small Numbers       1000000    17.6757                             18.0314                             Winner: custom.sorts.CustomSort::sort, faster by 1.97%
Large Numbers       1000000    17.1735                             18.1786                             Winner: custom.sorts.CustomSort::sort, faster by 5.53%
Equal Distrib       1000000    15.7487                             17.0909                             Winner: custom.sorts.CustomSort::sort, faster by 7.85%
Unequal Distrib     1000000    15.8844                             17.9119                             Winner: custom.sorts.CustomSort::sort, faster by 11.32%
Random Wide         10000000   197.2637                            200.4993                            Winner: custom.sorts.CustomSort::sort, faster by 1.61%
Random Narrow       10000000   187.2333                            201.7975                            Winner: custom.sorts.CustomSort::sort, faster by 7.22%
Nearly Sorted       10000000   71.8894                             88.9323                             Winner: custom.sorts.CustomSort::sort, faster by 19.16%
Reverse Sorted      10000000   6.1535                              14.0794                             Winner: custom.sorts.CustomSort::sort, faster by 56.29%
High Variance       10000000   194.3886                            215.5043                            Winner: custom.sorts.CustomSort::sort, faster by 9.80%
Small Numbers       10000000   192.9467                            205.9151                            Winner: custom.sorts.CustomSort::sort, faster by 6.30%
Large Numbers       10000000   184.8287                            206.8810                            Winner: custom.sorts.CustomSort::sort, faster by 10.66%
Equal Distrib       10000000   189.4507                            201.1356                            Winner: custom.sorts.CustomSort::sort, faster by 5.81%
Unequal Distrib     10000000   189.2458                            206.9545                            Winner: custom.sorts.CustomSort::sort, faster by 8.56%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.43                    63/1350 wins   
java.util.Arrays::parallelSort     7.34                     18/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       5.09% better than java.util.Arrays::parallelSort     



iteration 4/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8581                              1.9071                              Winner: custom.sorts.CustomSort::sort, faster by 2.57%
Random Narrow       100000     1.7762                              1.8891                              Winner: custom.sorts.CustomSort::sort, faster by 5.98%
Nearly Sorted       100000     0.7387                              0.7096                              Winner: java.util.Arrays::parallelSort, faster by 3.94%
Reverse Sorted      100000     0.1291                              0.1414                              Winner: custom.sorts.CustomSort::sort, faster by 8.65%
High Variance       100000     1.5390                              1.7323                              Winner: custom.sorts.CustomSort::sort, faster by 11.15%
Small Numbers       100000     1.6886                              1.8802                              Winner: custom.sorts.CustomSort::sort, faster by 10.19%
Large Numbers       100000     1.7519                              1.7374                              Winner: java.util.Arrays::parallelSort, faster by 0.83%
Equal Distrib       100000     1.9418                              1.8202                              Winner: java.util.Arrays::parallelSort, faster by 6.26%
Unequal Distrib     100000     1.6243                              1.6631                              Winner: custom.sorts.CustomSort::sort, faster by 2.33%
Random Wide         1000000    17.3149                             17.7150                             Winner: custom.sorts.CustomSort::sort, faster by 2.26%
Random Narrow       1000000    16.9808                             19.1333                             Winner: custom.sorts.CustomSort::sort, faster by 11.25%
Nearly Sorted       1000000    6.4847                              7.6225                              Winner: custom.sorts.CustomSort::sort, faster by 14.93%
Reverse Sorted      1000000    0.8680                              1.5294                              Winner: custom.sorts.CustomSort::sort, faster by 43.25%
High Variance       1000000    17.3024                             17.6425                             Winner: custom.sorts.CustomSort::sort, faster by 1.93%
Small Numbers       1000000    17.7362                             18.1295                             Winner: custom.sorts.CustomSort::sort, faster by 2.17%
Large Numbers       1000000    16.4501                             18.0419                             Winner: custom.sorts.CustomSort::sort, faster by 8.82%
Equal Distrib       1000000    18.1723                             18.0940                             Winner: java.util.Arrays::parallelSort, faster by 0.43%
Unequal Distrib     1000000    19.0280                             17.3027                             Winner: java.util.Arrays::parallelSort, faster by 9.07%
Random Wide         10000000   202.8719                            197.4559                            Winner: java.util.Arrays::parallelSort, faster by 2.67%
Random Narrow       10000000   190.3358                            207.6647                            Winner: custom.sorts.CustomSort::sort, faster by 8.34%
Nearly Sorted       10000000   73.5324                             87.7248                             Winner: custom.sorts.CustomSort::sort, faster by 16.18%
Reverse Sorted      10000000   6.1826                              14.0417                             Winner: custom.sorts.CustomSort::sort, faster by 55.97%
High Variance       10000000   206.0772                            220.7854                            Winner: custom.sorts.CustomSort::sort, faster by 6.66%
Small Numbers       10000000   191.3095                            205.0186                            Winner: custom.sorts.CustomSort::sort, faster by 6.69%
Large Numbers       10000000   187.4832                            202.2949                            Winner: custom.sorts.CustomSort::sort, faster by 7.32%
Equal Distrib       10000000   209.5617                            201.9528                            Winner: java.util.Arrays::parallelSort, faster by 3.63%
Unequal Distrib     10000000   198.3616                            216.5792                            Winner: custom.sorts.CustomSort::sort, faster by 8.41%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.26                    83/1350 wins   
java.util.Arrays::parallelSort     6.36                     25/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       5.91% better than java.util.Arrays::parallelSort     



iteration 5/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9139                              1.8430                              Winner: java.util.Arrays::parallelSort, faster by 3.70%
Random Narrow       100000     1.8403                              1.8308                              Winner: java.util.Arrays::parallelSort, faster by 0.52%
Nearly Sorted       100000     0.6967                              0.7539                              Winner: custom.sorts.CustomSort::sort, faster by 7.60%
Reverse Sorted      100000     0.1479                              0.1617                              Winner: custom.sorts.CustomSort::sort, faster by 8.56%
High Variance       100000     1.6872                              1.8048                              Winner: custom.sorts.CustomSort::sort, faster by 6.52%
Small Numbers       100000     1.6480                              1.6811                              Winner: custom.sorts.CustomSort::sort, faster by 1.97%
Large Numbers       100000     1.6091                              1.8306                              Winner: custom.sorts.CustomSort::sort, faster by 12.10%
Equal Distrib       100000     1.7258                              1.8878                              Winner: custom.sorts.CustomSort::sort, faster by 8.58%
Unequal Distrib     100000     1.7411                              1.8147                              Winner: custom.sorts.CustomSort::sort, faster by 4.06%
Random Wide         1000000    17.7095                             18.3177                             Winner: custom.sorts.CustomSort::sort, faster by 3.32%
Random Narrow       1000000    17.2367                             18.2889                             Winner: custom.sorts.CustomSort::sort, faster by 5.75%
Nearly Sorted       1000000    6.6264                              7.8576                              Winner: custom.sorts.CustomSort::sort, faster by 15.67%
Reverse Sorted      1000000    0.8825                              1.5357                              Winner: custom.sorts.CustomSort::sort, faster by 42.53%
High Variance       1000000    16.8624                             20.0281                             Winner: custom.sorts.CustomSort::sort, faster by 15.81%
Small Numbers       1000000    18.7628                             18.2423                             Winner: java.util.Arrays::parallelSort, faster by 2.77%
Large Numbers       1000000    17.4624                             18.6553                             Winner: custom.sorts.CustomSort::sort, faster by 6.39%
Equal Distrib       1000000    18.2349                             18.2595                             Winner: custom.sorts.CustomSort::sort, faster by 0.14%
Unequal Distrib     1000000    16.6825                             19.2868                             Winner: custom.sorts.CustomSort::sort, faster by 13.50%
Random Wide         10000000   199.2485                            195.7050                            Winner: java.util.Arrays::parallelSort, faster by 1.78%
Random Narrow       10000000   195.4289                            199.8675                            Winner: custom.sorts.CustomSort::sort, faster by 2.22%
Nearly Sorted       10000000   75.0157                             89.7204                             Winner: custom.sorts.CustomSort::sort, faster by 16.39%
Reverse Sorted      10000000   6.3356                              14.0622                             Winner: custom.sorts.CustomSort::sort, faster by 54.95%
High Variance       10000000   194.6577                            212.4746                            Winner: custom.sorts.CustomSort::sort, faster by 8.39%
Small Numbers       10000000   199.3394                            209.4993                            Winner: custom.sorts.CustomSort::sort, faster by 4.85%
Large Numbers       10000000   203.1010                            207.5780                            Winner: custom.sorts.CustomSort::sort, faster by 2.16%
Equal Distrib       10000000   200.8616                            206.1195                            Winner: custom.sorts.CustomSort::sort, faster by 2.55%
Unequal Distrib     10000000   204.0619                            206.0662                            Winner: custom.sorts.CustomSort::sort, faster by 0.97%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      11.91                    106/1350 wins  
java.util.Arrays::parallelSort     5.78                     29/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       6.13% better than java.util.Arrays::parallelSort     



iteration 6/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8498                              1.9590                              Winner: custom.sorts.CustomSort::sort, faster by 5.57%
Random Narrow       100000     1.7090                              2.0497                              Winner: custom.sorts.CustomSort::sort, faster by 16.62%
Nearly Sorted       100000     0.7555                              0.7743                              Winner: custom.sorts.CustomSort::sort, faster by 2.43%
Reverse Sorted      100000     0.1609                              0.1590                              Winner: java.util.Arrays::parallelSort, faster by 1.18%
High Variance       100000     1.6850                              1.7294                              Winner: custom.sorts.CustomSort::sort, faster by 2.57%
Small Numbers       100000     1.6731                              1.8629                              Winner: custom.sorts.CustomSort::sort, faster by 10.19%
Large Numbers       100000     1.6176                              1.8496                              Winner: custom.sorts.CustomSort::sort, faster by 12.54%
Equal Distrib       100000     1.7080                              1.8758                              Winner: custom.sorts.CustomSort::sort, faster by 8.94%
Unequal Distrib     100000     1.6733                              1.8780                              Winner: custom.sorts.CustomSort::sort, faster by 10.90%
Random Wide         1000000    18.0554                             20.8418                             Winner: custom.sorts.CustomSort::sort, faster by 13.37%
Random Narrow       1000000    16.2995                             19.4938                             Winner: custom.sorts.CustomSort::sort, faster by 16.39%
Nearly Sorted       1000000    6.5062                              7.9142                              Winner: custom.sorts.CustomSort::sort, faster by 17.79%
Reverse Sorted      1000000    0.8367                              1.4989                              Winner: custom.sorts.CustomSort::sort, faster by 44.18%
High Variance       1000000    16.0681                             19.0392                             Winner: custom.sorts.CustomSort::sort, faster by 15.60%
Small Numbers       1000000    16.0550                             19.3311                             Winner: custom.sorts.CustomSort::sort, faster by 16.95%
Large Numbers       1000000    18.2209                             18.5895                             Winner: custom.sorts.CustomSort::sort, faster by 1.98%
Equal Distrib       1000000    17.2810                             19.2486                             Winner: custom.sorts.CustomSort::sort, faster by 10.22%
Unequal Distrib     1000000    18.7550                             18.2086                             Winner: java.util.Arrays::parallelSort, faster by 2.91%
Random Wide         10000000   211.2934                            209.6108                            Winner: java.util.Arrays::parallelSort, faster by 0.80%
Random Narrow       10000000   205.1367                            211.8848                            Winner: custom.sorts.CustomSort::sort, faster by 3.18%
Nearly Sorted       10000000   75.0981                             92.2718                             Winner: custom.sorts.CustomSort::sort, faster by 18.61%
Reverse Sorted      10000000   6.2678                              14.2296                             Winner: custom.sorts.CustomSort::sort, faster by 55.95%
High Variance       10000000   187.6611                            196.3182                            Winner: custom.sorts.CustomSort::sort, faster by 4.41%
Small Numbers       10000000   202.0642                            207.2994                            Winner: custom.sorts.CustomSort::sort, faster by 2.53%
Large Numbers       10000000   184.0755                            205.5752                            Winner: custom.sorts.CustomSort::sort, faster by 10.46%
Equal Distrib       10000000   209.6726                            213.4423                            Winner: custom.sorts.CustomSort::sort, faster by 1.77%
Unequal Distrib     10000000   199.5525                            220.3329                            Winner: custom.sorts.CustomSort::sort, faster by 9.43%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.12                    130/1350 wins  
java.util.Arrays::parallelSort     5.39                     32/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       6.73% better than java.util.Arrays::parallelSort     



iteration 7/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9979                              1.9434                              Winner: java.util.Arrays::parallelSort, faster by 2.73%
Random Narrow       100000     1.6991                              1.8442                              Winner: custom.sorts.CustomSort::sort, faster by 7.87%
Nearly Sorted       100000     0.6708                              0.7903                              Winner: custom.sorts.CustomSort::sort, faster by 15.11%
Reverse Sorted      100000     0.1361                              0.1591                              Winner: custom.sorts.CustomSort::sort, faster by 14.43%
High Variance       100000     1.6495                              1.8138                              Winner: custom.sorts.CustomSort::sort, faster by 9.06%
Small Numbers       100000     1.7196                              1.9943                              Winner: custom.sorts.CustomSort::sort, faster by 13.78%
Large Numbers       100000     1.6275                              1.8353                              Winner: custom.sorts.CustomSort::sort, faster by 11.32%
Equal Distrib       100000     1.7714                              1.8681                              Winner: custom.sorts.CustomSort::sort, faster by 5.18%
Unequal Distrib     100000     1.7311                              1.7775                              Winner: custom.sorts.CustomSort::sort, faster by 2.61%
Random Wide         1000000    19.7760                             19.7495                             Winner: java.util.Arrays::parallelSort, faster by 0.13%
Random Narrow       1000000    16.1085                             18.9111                             Winner: custom.sorts.CustomSort::sort, faster by 14.82%
Nearly Sorted       1000000    6.6930                              7.9205                              Winner: custom.sorts.CustomSort::sort, faster by 15.50%
Reverse Sorted      1000000    0.8995                              1.5184                              Winner: custom.sorts.CustomSort::sort, faster by 40.76%
High Variance       1000000    17.4306                             18.8325                             Winner: custom.sorts.CustomSort::sort, faster by 7.44%
Small Numbers       1000000    18.5456                             19.7975                             Winner: custom.sorts.CustomSort::sort, faster by 6.32%
Large Numbers       1000000    17.1461                             18.6497                             Winner: custom.sorts.CustomSort::sort, faster by 8.06%
Equal Distrib       1000000    17.9418                             19.5456                             Winner: custom.sorts.CustomSort::sort, faster by 8.21%
Unequal Distrib     1000000    16.9081                             19.3866                             Winner: custom.sorts.CustomSort::sort, faster by 12.78%
Random Wide         10000000   195.6649                            209.6780                            Winner: custom.sorts.CustomSort::sort, faster by 6.68%
Random Narrow       10000000   210.6467                            208.4737                            Winner: java.util.Arrays::parallelSort, faster by 1.03%
Nearly Sorted       10000000   74.9763                             91.4208                             Winner: custom.sorts.CustomSort::sort, faster by 17.99%
Reverse Sorted      10000000   6.9863                              14.0626                             Winner: custom.sorts.CustomSort::sort, faster by 50.32%
High Variance       10000000   209.0665                            206.5637                            Winner: java.util.Arrays::parallelSort, faster by 1.20%
Small Numbers       10000000   203.2633                            206.9635                            Winner: custom.sorts.CustomSort::sort, faster by 1.79%
Large Numbers       10000000   196.0555                            199.6330                            Winner: custom.sorts.CustomSort::sort, faster by 1.79%
Equal Distrib       10000000   187.2187                            210.5208                            Winner: custom.sorts.CustomSort::sort, faster by 11.07%
Unequal Distrib     10000000   196.9904                            204.1219                            Winner: custom.sorts.CustomSort::sort, faster by 3.49%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.17                    153/1350 wins  
java.util.Arrays::parallelSort     4.93                     36/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.23% better than java.util.Arrays::parallelSort     



iteration 8/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8071                              1.9633                              Winner: custom.sorts.CustomSort::sort, faster by 7.96%
Random Narrow       100000     1.7380                              1.7735                              Winner: custom.sorts.CustomSort::sort, faster by 2.00%
Nearly Sorted       100000     0.7515                              0.7840                              Winner: custom.sorts.CustomSort::sort, faster by 4.16%
Reverse Sorted      100000     0.1302                              0.1575                              Winner: custom.sorts.CustomSort::sort, faster by 17.32%
High Variance       100000     1.7137                              1.8192                              Winner: custom.sorts.CustomSort::sort, faster by 5.80%
Small Numbers       100000     1.6412                              1.9271                              Winner: custom.sorts.CustomSort::sort, faster by 14.84%
Large Numbers       100000     1.7835                              1.7823                              Winner: java.util.Arrays::parallelSort, faster by 0.07%
Equal Distrib       100000     1.7198                              1.8335                              Winner: custom.sorts.CustomSort::sort, faster by 6.21%
Unequal Distrib     100000     1.5454                              1.9328                              Winner: custom.sorts.CustomSort::sort, faster by 20.05%
Random Wide         1000000    17.0937                             18.8123                             Winner: custom.sorts.CustomSort::sort, faster by 9.14%
Random Narrow       1000000    18.6227                             18.9068                             Winner: custom.sorts.CustomSort::sort, faster by 1.50%
Nearly Sorted       1000000    7.7588                              8.0981                              Winner: custom.sorts.CustomSort::sort, faster by 4.19%
Reverse Sorted      1000000    0.9138                              1.5021                              Winner: custom.sorts.CustomSort::sort, faster by 39.16%
High Variance       1000000    16.2011                             18.1667                             Winner: custom.sorts.CustomSort::sort, faster by 10.82%
Small Numbers       1000000    19.2386                             18.1023                             Winner: java.util.Arrays::parallelSort, faster by 5.91%
Large Numbers       1000000    17.8637                             18.8204                             Winner: custom.sorts.CustomSort::sort, faster by 5.08%
Equal Distrib       1000000    18.0871                             18.6389                             Winner: custom.sorts.CustomSort::sort, faster by 2.96%
Unequal Distrib     1000000    18.3110                             18.9420                             Winner: custom.sorts.CustomSort::sort, faster by 3.33%
Random Wide         10000000   218.9866                            199.6259                            Winner: java.util.Arrays::parallelSort, faster by 8.84%
Random Narrow       10000000   192.2954                            225.0928                            Winner: custom.sorts.CustomSort::sort, faster by 14.57%
Nearly Sorted       10000000   74.9462                             90.6344                             Winner: custom.sorts.CustomSort::sort, faster by 17.31%
Reverse Sorted      10000000   6.5808                              14.3010                             Winner: custom.sorts.CustomSort::sort, faster by 53.98%
High Variance       10000000   193.0294                            206.5089                            Winner: custom.sorts.CustomSort::sort, faster by 6.53%
Small Numbers       10000000   193.5071                            221.8495                            Winner: custom.sorts.CustomSort::sort, faster by 12.78%
Large Numbers       10000000   197.2001                            222.4211                            Winner: custom.sorts.CustomSort::sort, faster by 11.34%
Equal Distrib       10000000   193.8795                            208.9052                            Winner: custom.sorts.CustomSort::sort, faster by 7.19%
Unequal Distrib     10000000   209.8894                            201.3507                            Winner: java.util.Arrays::parallelSort, faster by 4.07%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.16                    176/1350 wins  
java.util.Arrays::parallelSort     4.91                     40/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.25% better than java.util.Arrays::parallelSort     



iteration 9/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9278                              2.0055                              Winner: custom.sorts.CustomSort::sort, faster by 3.88%
Random Narrow       100000     1.7864                              2.0290                              Winner: custom.sorts.CustomSort::sort, faster by 11.95%
Nearly Sorted       100000     0.7405                              0.7725                              Winner: custom.sorts.CustomSort::sort, faster by 4.14%
Reverse Sorted      100000     0.1276                              0.1571                              Winner: custom.sorts.CustomSort::sort, faster by 18.75%
High Variance       100000     1.7793                              1.7856                              Winner: custom.sorts.CustomSort::sort, faster by 0.35%
Small Numbers       100000     1.7716                              1.8670                              Winner: custom.sorts.CustomSort::sort, faster by 5.11%
Large Numbers       100000     1.7790                              1.8773                              Winner: custom.sorts.CustomSort::sort, faster by 5.23%
Equal Distrib       100000     1.6908                              1.8749                              Winner: custom.sorts.CustomSort::sort, faster by 9.82%
Unequal Distrib     100000     1.7132                              1.8696                              Winner: custom.sorts.CustomSort::sort, faster by 8.37%
Random Wide         1000000    18.1025                             18.0535                             Winner: java.util.Arrays::parallelSort, faster by 0.27%
Random Narrow       1000000    18.1551                             20.4282                             Winner: custom.sorts.CustomSort::sort, faster by 11.13%
Nearly Sorted       1000000    6.7304                              7.7587                              Winner: custom.sorts.CustomSort::sort, faster by 13.25%
Reverse Sorted      1000000    0.8717                              1.5469                              Winner: custom.sorts.CustomSort::sort, faster by 43.65%
High Variance       1000000    18.1596                             19.3146                             Winner: custom.sorts.CustomSort::sort, faster by 5.98%
Small Numbers       1000000    19.4224                             18.4636                             Winner: java.util.Arrays::parallelSort, faster by 4.94%
Large Numbers       1000000    17.2403                             18.2773                             Winner: custom.sorts.CustomSort::sort, faster by 5.67%
Equal Distrib       1000000    19.4174                             19.5353                             Winner: custom.sorts.CustomSort::sort, faster by 0.60%
Unequal Distrib     1000000    18.7115                             19.0451                             Winner: custom.sorts.CustomSort::sort, faster by 1.75%
Random Wide         10000000   208.8391                            209.7377                            Winner: custom.sorts.CustomSort::sort, faster by 0.43%
Random Narrow       10000000   208.7956                            199.2276                            Winner: java.util.Arrays::parallelSort, faster by 4.58%
Nearly Sorted       10000000   75.4823                             90.1060                             Winner: custom.sorts.CustomSort::sort, faster by 16.23%
Reverse Sorted      10000000   6.8182                              14.2045                             Winner: custom.sorts.CustomSort::sort, faster by 52.00%
High Variance       10000000   217.0880                            230.3500                            Winner: custom.sorts.CustomSort::sort, faster by 5.76%
Small Numbers       10000000   207.1841                            202.7115                            Winner: java.util.Arrays::parallelSort, faster by 2.16%
Large Numbers       10000000   199.4378                            207.3557                            Winner: custom.sorts.CustomSort::sort, faster by 3.82%
Equal Distrib       10000000   203.3878                            206.4674                            Winner: custom.sorts.CustomSort::sort, faster by 1.49%
Unequal Distrib     10000000   199.5955                            200.8959                            Winner: custom.sorts.CustomSort::sort, faster by 0.65%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      11.91                    199/1350 wins  
java.util.Arrays::parallelSort     4.74                     44/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.17% better than java.util.Arrays::parallelSort     



iteration 10/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8387                              1.9346                              Winner: custom.sorts.CustomSort::sort, faster by 4.96%
Random Narrow       100000     1.7433                              1.9961                              Winner: custom.sorts.CustomSort::sort, faster by 12.66%
Nearly Sorted       100000     0.6980                              0.7794                              Winner: custom.sorts.CustomSort::sort, faster by 10.45%
Reverse Sorted      100000     0.1221                              0.1614                              Winner: custom.sorts.CustomSort::sort, faster by 24.34%
High Variance       100000     1.8186                              1.8194                              Winner: custom.sorts.CustomSort::sort, faster by 0.04%
Small Numbers       100000     1.6371                              1.7087                              Winner: custom.sorts.CustomSort::sort, faster by 4.19%
Large Numbers       100000     1.7086                              1.8361                              Winner: custom.sorts.CustomSort::sort, faster by 6.95%
Equal Distrib       100000     1.8041                              1.8474                              Winner: custom.sorts.CustomSort::sort, faster by 2.34%
Unequal Distrib     100000     1.5780                              1.7872                              Winner: custom.sorts.CustomSort::sort, faster by 11.70%
Random Wide         1000000    17.2647                             20.3614                             Winner: custom.sorts.CustomSort::sort, faster by 15.21%
Random Narrow       1000000    16.4157                             18.2117                             Winner: custom.sorts.CustomSort::sort, faster by 9.86%
Nearly Sorted       1000000    6.7378                              8.1120                              Winner: custom.sorts.CustomSort::sort, faster by 16.94%
Reverse Sorted      1000000    0.8729                              1.4905                              Winner: custom.sorts.CustomSort::sort, faster by 41.44%
High Variance       1000000    17.0277                             18.4982                             Winner: custom.sorts.CustomSort::sort, faster by 7.95%
Small Numbers       1000000    18.3846                             19.8959                             Winner: custom.sorts.CustomSort::sort, faster by 7.60%
Large Numbers       1000000    18.0568                             19.8945                             Winner: custom.sorts.CustomSort::sort, faster by 9.24%
Equal Distrib       1000000    17.5446                             19.3539                             Winner: custom.sorts.CustomSort::sort, faster by 9.35%
Unequal Distrib     1000000    16.5335                             18.4118                             Winner: custom.sorts.CustomSort::sort, faster by 10.20%
Random Wide         10000000   195.2370                            226.2593                            Winner: custom.sorts.CustomSort::sort, faster by 13.71%
Random Narrow       10000000   194.6634                            236.4141                            Winner: custom.sorts.CustomSort::sort, faster by 17.66%
Nearly Sorted       10000000   75.4228                             90.1338                             Winner: custom.sorts.CustomSort::sort, faster by 16.32%
Reverse Sorted      10000000   6.2880                              14.1575                             Winner: custom.sorts.CustomSort::sort, faster by 55.59%
High Variance       10000000   209.1407                            202.0766                            Winner: java.util.Arrays::parallelSort, faster by 3.38%
Small Numbers       10000000   204.5008                            208.6056                            Winner: custom.sorts.CustomSort::sort, faster by 1.97%
Large Numbers       10000000   192.6880                            228.2835                            Winner: custom.sorts.CustomSort::sort, faster by 15.59%
Equal Distrib       10000000   190.2026                            200.0420                            Winner: custom.sorts.CustomSort::sort, faster by 4.92%
Unequal Distrib     10000000   214.7927                            205.2885                            Winner: java.util.Arrays::parallelSort, faster by 4.42%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.06                    224/1350 wins  
java.util.Arrays::parallelSort     4.70                     46/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.36% better than java.util.Arrays::parallelSort     



iteration 11/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8850                              2.0126                              Winner: custom.sorts.CustomSort::sort, faster by 6.34%
Random Narrow       100000     1.7875                              1.9394                              Winner: custom.sorts.CustomSort::sort, faster by 7.84%
Nearly Sorted       100000     0.7103                              0.7943                              Winner: custom.sorts.CustomSort::sort, faster by 10.58%
Reverse Sorted      100000     0.1259                              0.1609                              Winner: custom.sorts.CustomSort::sort, faster by 21.75%
High Variance       100000     1.7287                              1.7534                              Winner: custom.sorts.CustomSort::sort, faster by 1.41%
Small Numbers       100000     1.6218                              1.8417                              Winner: custom.sorts.CustomSort::sort, faster by 11.94%
Large Numbers       100000     1.6813                              2.1043                              Winner: custom.sorts.CustomSort::sort, faster by 20.11%
Equal Distrib       100000     2.1283                              2.1851                              Winner: custom.sorts.CustomSort::sort, faster by 2.60%
Unequal Distrib     100000     1.6837                              1.8167                              Winner: custom.sorts.CustomSort::sort, faster by 7.32%
Random Wide         1000000    19.1483                             19.2383                             Winner: custom.sorts.CustomSort::sort, faster by 0.47%
Random Narrow       1000000    17.2943                             18.8326                             Winner: custom.sorts.CustomSort::sort, faster by 8.17%
Nearly Sorted       1000000    6.6808                              7.9444                              Winner: custom.sorts.CustomSort::sort, faster by 15.91%
Reverse Sorted      1000000    0.8490                              1.5330                              Winner: custom.sorts.CustomSort::sort, faster by 44.62%
High Variance       1000000    18.7723                             19.3237                             Winner: custom.sorts.CustomSort::sort, faster by 2.85%
Small Numbers       1000000    18.8761                             18.5883                             Winner: java.util.Arrays::parallelSort, faster by 1.52%
Large Numbers       1000000    17.7525                             19.1183                             Winner: custom.sorts.CustomSort::sort, faster by 7.14%
Equal Distrib       1000000    17.3403                             18.8717                             Winner: custom.sorts.CustomSort::sort, faster by 8.12%
Unequal Distrib     1000000    18.0473                             20.2305                             Winner: custom.sorts.CustomSort::sort, faster by 10.79%
Random Wide         10000000   199.7796                            214.0979                            Winner: custom.sorts.CustomSort::sort, faster by 6.69%
Random Narrow       10000000   189.1323                            198.8153                            Winner: custom.sorts.CustomSort::sort, faster by 4.87%
Nearly Sorted       10000000   75.5336                             92.8893                             Winner: custom.sorts.CustomSort::sort, faster by 18.68%
Reverse Sorted      10000000   6.5752                              14.4329                             Winner: custom.sorts.CustomSort::sort, faster by 54.44%
High Variance       10000000   210.4478                            206.1330                            Winner: java.util.Arrays::parallelSort, faster by 2.05%
Small Numbers       10000000   203.7990                            222.0110                            Winner: custom.sorts.CustomSort::sort, faster by 8.20%
Large Numbers       10000000   201.5047                            214.2746                            Winner: custom.sorts.CustomSort::sort, faster by 5.96%
Equal Distrib       10000000   216.0122                            210.1783                            Winner: java.util.Arrays::parallelSort, faster by 2.70%
Unequal Distrib     10000000   203.2036                            213.3704                            Winner: custom.sorts.CustomSort::sort, faster by 4.76%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.07                    248/1350 wins  
java.util.Arrays::parallelSort     4.54                     49/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.53% better than java.util.Arrays::parallelSort     



iteration 12/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9738                              1.9044                              Winner: java.util.Arrays::parallelSort, faster by 3.51%
Random Narrow       100000     1.7767                              1.9836                              Winner: custom.sorts.CustomSort::sort, faster by 10.43%
Nearly Sorted       100000     0.6995                              0.7485                              Winner: custom.sorts.CustomSort::sort, faster by 6.55%
Reverse Sorted      100000     0.1295                              0.1576                              Winner: custom.sorts.CustomSort::sort, faster by 17.88%
High Variance       100000     1.6751                              1.8054                              Winner: custom.sorts.CustomSort::sort, faster by 7.22%
Small Numbers       100000     1.6496                              1.9057                              Winner: custom.sorts.CustomSort::sort, faster by 13.43%
Large Numbers       100000     1.5773                              1.9243                              Winner: custom.sorts.CustomSort::sort, faster by 18.03%
Equal Distrib       100000     1.7969                              1.7961                              Winner: java.util.Arrays::parallelSort, faster by 0.05%
Unequal Distrib     100000     1.7026                              1.8261                              Winner: custom.sorts.CustomSort::sort, faster by 6.76%
Random Wide         1000000    18.8941                             19.3727                             Winner: custom.sorts.CustomSort::sort, faster by 2.47%
Random Narrow       1000000    18.0254                             19.6114                             Winner: custom.sorts.CustomSort::sort, faster by 8.09%
Nearly Sorted       1000000    6.8998                              7.9779                              Winner: custom.sorts.CustomSort::sort, faster by 13.51%
Reverse Sorted      1000000    0.8522                              1.4994                              Winner: custom.sorts.CustomSort::sort, faster by 43.17%
High Variance       1000000    17.9678                             19.6436                             Winner: custom.sorts.CustomSort::sort, faster by 8.53%
Small Numbers       1000000    18.1910                             19.4061                             Winner: custom.sorts.CustomSort::sort, faster by 6.26%
Large Numbers       1000000    18.1794                             19.7829                             Winner: custom.sorts.CustomSort::sort, faster by 8.11%
Equal Distrib       1000000    17.5768                             18.3842                             Winner: custom.sorts.CustomSort::sort, faster by 4.39%
Unequal Distrib     1000000    17.6049                             18.8986                             Winner: custom.sorts.CustomSort::sort, faster by 6.85%
Random Wide         10000000   202.2072                            219.3429                            Winner: custom.sorts.CustomSort::sort, faster by 7.81%
Random Narrow       10000000   198.8819                            211.8396                            Winner: custom.sorts.CustomSort::sort, faster by 6.12%
Nearly Sorted       10000000   74.8017                             90.0997                             Winner: custom.sorts.CustomSort::sort, faster by 16.98%
Reverse Sorted      10000000   6.2747                              14.1091                             Winner: custom.sorts.CustomSort::sort, faster by 55.53%
High Variance       10000000   198.9141                            215.5894                            Winner: custom.sorts.CustomSort::sort, faster by 7.73%
Small Numbers       10000000   199.9922                            210.6750                            Winner: custom.sorts.CustomSort::sort, faster by 5.07%
Large Numbers       10000000   195.7553                            213.5915                            Winner: custom.sorts.CustomSort::sort, faster by 8.35%
Equal Distrib       10000000   200.6223                            221.2367                            Winner: custom.sorts.CustomSort::sort, faster by 9.32%
Unequal Distrib     10000000   197.2726                            208.7178                            Winner: custom.sorts.CustomSort::sort, faster by 5.48%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.08                    273/1350 wins  
java.util.Arrays::parallelSort     4.43                     51/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.64% better than java.util.Arrays::parallelSort     



iteration 13/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.7670                              2.0452                              Winner: custom.sorts.CustomSort::sort, faster by 13.60%
Random Narrow       100000     1.8418                              1.9567                              Winner: custom.sorts.CustomSort::sort, faster by 5.87%
Nearly Sorted       100000     0.6748                              0.7777                              Winner: custom.sorts.CustomSort::sort, faster by 13.24%
Reverse Sorted      100000     0.1326                              0.1615                              Winner: custom.sorts.CustomSort::sort, faster by 17.94%
High Variance       100000     1.6871                              4.4468                              Winner: custom.sorts.CustomSort::sort, faster by 62.06%
Small Numbers       100000     1.6801                              1.8681                              Winner: custom.sorts.CustomSort::sort, faster by 10.06%
Large Numbers       100000     1.6687                              1.7064                              Winner: custom.sorts.CustomSort::sort, faster by 2.21%
Equal Distrib       100000     1.7038                              1.8120                              Winner: custom.sorts.CustomSort::sort, faster by 5.97%
Unequal Distrib     100000     1.6058                              1.8357                              Winner: custom.sorts.CustomSort::sort, faster by 12.52%
Random Wide         1000000    18.8816                             18.7877                             Winner: java.util.Arrays::parallelSort, faster by 0.50%
Random Narrow       1000000    17.1689                             18.5773                             Winner: custom.sorts.CustomSort::sort, faster by 7.58%
Nearly Sorted       1000000    6.9820                              8.1268                              Winner: custom.sorts.CustomSort::sort, faster by 14.09%
Reverse Sorted      1000000    0.8665                              1.5017                              Winner: custom.sorts.CustomSort::sort, faster by 42.30%
High Variance       1000000    16.7993                             19.2783                             Winner: custom.sorts.CustomSort::sort, faster by 12.86%
Small Numbers       1000000    18.2912                             19.5658                             Winner: custom.sorts.CustomSort::sort, faster by 6.51%
Large Numbers       1000000    18.2633                             18.8746                             Winner: custom.sorts.CustomSort::sort, faster by 3.24%
Equal Distrib       1000000    19.3729                             18.1344                             Winner: java.util.Arrays::parallelSort, faster by 6.39%
Unequal Distrib     1000000    17.8155                             19.1209                             Winner: custom.sorts.CustomSort::sort, faster by 6.83%
Random Wide         10000000   188.2204                            209.7187                            Winner: custom.sorts.CustomSort::sort, faster by 10.25%
Random Narrow       10000000   205.5512                            207.4980                            Winner: custom.sorts.CustomSort::sort, faster by 0.94%
Nearly Sorted       10000000   75.9257                             93.6537                             Winner: custom.sorts.CustomSort::sort, faster by 18.93%
Reverse Sorted      10000000   6.6244                              14.0667                             Winner: custom.sorts.CustomSort::sort, faster by 52.91%
High Variance       10000000   186.1189                            202.4193                            Winner: custom.sorts.CustomSort::sort, faster by 8.05%
Small Numbers       10000000   210.0910                            206.4209                            Winner: java.util.Arrays::parallelSort, faster by 1.75%
Large Numbers       10000000   212.0556                            215.3327                            Winner: custom.sorts.CustomSort::sort, faster by 1.52%
Equal Distrib       10000000   189.1160                            213.9735                            Winner: custom.sorts.CustomSort::sort, faster by 11.62%
Unequal Distrib     10000000   217.4611                            214.5710                            Winner: java.util.Arrays::parallelSort, faster by 1.33%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.29                    296/1350 wins  
java.util.Arrays::parallelSort     4.29                     55/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       8.00% better than java.util.Arrays::parallelSort     



iteration 14/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     2.0455                              2.0992                              Winner: custom.sorts.CustomSort::sort, faster by 2.56%
Random Narrow       100000     1.7886                              2.0322                              Winner: custom.sorts.CustomSort::sort, faster by 11.98%
Nearly Sorted       100000     0.7010                              0.7956                              Winner: custom.sorts.CustomSort::sort, faster by 11.89%
Reverse Sorted      100000     0.1538                              0.1569                              Winner: custom.sorts.CustomSort::sort, faster by 1.92%
High Variance       100000     1.6817                              1.9278                              Winner: custom.sorts.CustomSort::sort, faster by 12.76%
Small Numbers       100000     1.7534                              1.7863                              Winner: custom.sorts.CustomSort::sort, faster by 1.84%
Large Numbers       100000     1.7399                              1.8483                              Winner: custom.sorts.CustomSort::sort, faster by 5.87%
Equal Distrib       100000     1.8775                              2.0151                              Winner: custom.sorts.CustomSort::sort, faster by 6.82%
Unequal Distrib     100000     1.7224                              1.7976                              Winner: custom.sorts.CustomSort::sort, faster by 4.18%
Random Wide         1000000    18.4255                             20.1467                             Winner: custom.sorts.CustomSort::sort, faster by 8.54%
Random Narrow       1000000    17.2699                             19.5043                             Winner: custom.sorts.CustomSort::sort, faster by 11.46%
Nearly Sorted       1000000    6.7578                              8.1688                              Winner: custom.sorts.CustomSort::sort, faster by 17.27%
Reverse Sorted      1000000    0.9278                              1.4665                              Winner: custom.sorts.CustomSort::sort, faster by 36.74%
High Variance       1000000    19.7443                             19.5511                             Winner: java.util.Arrays::parallelSort, faster by 0.98%
Small Numbers       1000000    17.0969                             19.8328                             Winner: custom.sorts.CustomSort::sort, faster by 13.79%
Large Numbers       1000000    17.1854                             20.9436                             Winner: custom.sorts.CustomSort::sort, faster by 17.94%
Equal Distrib       1000000    18.4350                             18.3353                             Winner: java.util.Arrays::parallelSort, faster by 0.54%
Unequal Distrib     1000000    18.5455                             18.5571                             Winner: custom.sorts.CustomSort::sort, faster by 0.06%
Random Wide         10000000   203.4453                            216.6670                            Winner: custom.sorts.CustomSort::sort, faster by 6.10%
Random Narrow       10000000   209.5077                            198.6068                            Winner: java.util.Arrays::parallelSort, faster by 5.20%
Nearly Sorted       10000000   77.0801                             90.9320                             Winner: custom.sorts.CustomSort::sort, faster by 15.23%
Reverse Sorted      10000000   7.2294                              14.2036                             Winner: custom.sorts.CustomSort::sort, faster by 49.10%
High Variance       10000000   199.0460                            197.2047                            Winner: java.util.Arrays::parallelSort, faster by 0.93%
Small Numbers       10000000   210.9159                            228.0158                            Winner: custom.sorts.CustomSort::sort, faster by 7.50%
Large Numbers       10000000   188.7130                            202.2487                            Winner: custom.sorts.CustomSort::sort, faster by 6.69%
Equal Distrib       10000000   202.3170                            229.5313                            Winner: custom.sorts.CustomSort::sort, faster by 11.86%
Unequal Distrib     10000000   215.2010                            226.1148                            Winner: custom.sorts.CustomSort::sort, faster by 4.83%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.24                    319/1350 wins  
java.util.Arrays::parallelSort     4.13                     59/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       8.11% better than java.util.Arrays::parallelSort     



iteration 15/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8608                              2.0580                              Winner: custom.sorts.CustomSort::sort, faster by 9.58%
Random Narrow       100000     1.8549                              1.8649                              Winner: custom.sorts.CustomSort::sort, faster by 0.54%
Nearly Sorted       100000     0.7481                              0.7834                              Winner: custom.sorts.CustomSort::sort, faster by 4.51%
Reverse Sorted      100000     0.1382                              0.1567                              Winner: custom.sorts.CustomSort::sort, faster by 11.83%
High Variance       100000     1.7583                              1.7769                              Winner: custom.sorts.CustomSort::sort, faster by 1.05%
Small Numbers       100000     1.6706                              1.7847                              Winner: custom.sorts.CustomSort::sort, faster by 6.39%
Large Numbers       100000     1.7032                              1.8242                              Winner: custom.sorts.CustomSort::sort, faster by 6.63%
Equal Distrib       100000     1.8385                              1.9102                              Winner: custom.sorts.CustomSort::sort, faster by 3.75%
Unequal Distrib     100000     1.7174                              1.8237                              Winner: custom.sorts.CustomSort::sort, faster by 5.83%
Random Wide         1000000    18.2638                             20.7923                             Winner: custom.sorts.CustomSort::sort, faster by 12.16%
Random Narrow       1000000    20.1886                             18.7681                             Winner: java.util.Arrays::parallelSort, faster by 7.04%
Nearly Sorted       1000000    6.9213                              7.8111                              Winner: custom.sorts.CustomSort::sort, faster by 11.39%
Reverse Sorted      1000000    0.9272                              1.4754                              Winner: custom.sorts.CustomSort::sort, faster by 37.16%
High Variance       1000000    17.5353                             21.1383                             Winner: custom.sorts.CustomSort::sort, faster by 17.04%
Small Numbers       1000000    17.7026                             20.2273                             Winner: custom.sorts.CustomSort::sort, faster by 12.48%
Large Numbers       1000000    17.2061                             18.4187                             Winner: custom.sorts.CustomSort::sort, faster by 6.58%
Equal Distrib       1000000    18.2453                             18.1409                             Winner: java.util.Arrays::parallelSort, faster by 0.57%
Unequal Distrib     1000000    18.7226                             19.0875                             Winner: custom.sorts.CustomSort::sort, faster by 1.91%
Random Wide         10000000   224.7203                            219.8702                            Winner: java.util.Arrays::parallelSort, faster by 2.16%
Random Narrow       10000000   204.9437                            229.8798                            Winner: custom.sorts.CustomSort::sort, faster by 10.85%
Nearly Sorted       10000000   75.6301                             93.1546                             Winner: custom.sorts.CustomSort::sort, faster by 18.81%
Reverse Sorted      10000000   7.0838                              14.0537                             Winner: custom.sorts.CustomSort::sort, faster by 49.59%
High Variance       10000000   203.3266                            222.8749                            Winner: custom.sorts.CustomSort::sort, faster by 8.77%
Small Numbers       10000000   192.2497                            210.2441                            Winner: custom.sorts.CustomSort::sort, faster by 8.56%
Large Numbers       10000000   201.3407                            204.6507                            Winner: custom.sorts.CustomSort::sort, faster by 1.62%
Equal Distrib       10000000   218.1928                            209.0871                            Winner: java.util.Arrays::parallelSort, faster by 4.17%
Unequal Distrib     10000000   195.8769                            221.8854                            Winner: custom.sorts.CustomSort::sort, faster by 11.72%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.17                    342/1350 wins  
java.util.Arrays::parallelSort     4.09                     63/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       8.08% better than java.util.Arrays::parallelSort     



iteration 16/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     2.0446                              1.8485                              Winner: java.util.Arrays::parallelSort, faster by 9.59%
Random Narrow       100000     1.6898                              1.8365                              Winner: custom.sorts.CustomSort::sort, faster by 7.99%
Nearly Sorted       100000     0.6808                              0.7675                              Winner: custom.sorts.CustomSort::sort, faster by 11.30%
Reverse Sorted      100000     0.1459                              0.1569                              Winner: custom.sorts.CustomSort::sort, faster by 6.99%
High Variance       100000     1.6307                              1.9305                              Winner: custom.sorts.CustomSort::sort, faster by 15.53%
Small Numbers       100000     1.6653                              1.8263                              Winner: custom.sorts.CustomSort::sort, faster by 8.81%
Large Numbers       100000     1.7243                              1.7386                              Winner: custom.sorts.CustomSort::sort, faster by 0.82%
Equal Distrib       100000     1.7949                              1.8452                              Winner: custom.sorts.CustomSort::sort, faster by 2.73%
Unequal Distrib     100000     1.7627                              1.7808                              Winner: custom.sorts.CustomSort::sort, faster by 1.01%
Random Wide         1000000    18.8149                             19.8019                             Winner: custom.sorts.CustomSort::sort, faster by 4.98%
Random Narrow       1000000    19.0328                             19.9938                             Winner: custom.sorts.CustomSort::sort, faster by 4.81%
Nearly Sorted       1000000    6.7822                              7.9738                              Winner: custom.sorts.CustomSort::sort, faster by 14.94%
Reverse Sorted      1000000    0.9367                              1.4562                              Winner: custom.sorts.CustomSort::sort, faster by 35.68%
High Variance       1000000    17.1568                             19.3300                             Winner: custom.sorts.CustomSort::sort, faster by 11.24%
Small Numbers       1000000    19.5007                             20.0666                             Winner: custom.sorts.CustomSort::sort, faster by 2.82%
Large Numbers       1000000    16.8815                             18.8549                             Winner: custom.sorts.CustomSort::sort, faster by 10.47%
Equal Distrib       1000000    17.4778                             18.7051                             Winner: custom.sorts.CustomSort::sort, faster by 6.56%
Unequal Distrib     1000000    16.3261                             20.4846                             Winner: custom.sorts.CustomSort::sort, faster by 20.30%
Random Wide         10000000   201.3311                            219.7237                            Winner: custom.sorts.CustomSort::sort, faster by 8.37%
Random Narrow       10000000   199.1660                            216.6889                            Winner: custom.sorts.CustomSort::sort, faster by 8.09%
Nearly Sorted       10000000   76.3612                             90.6465                             Winner: custom.sorts.CustomSort::sort, faster by 15.76%
Reverse Sorted      10000000   6.8032                              14.4126                             Winner: custom.sorts.CustomSort::sort, faster by 52.80%
High Variance       10000000   210.0849                            206.1705                            Winner: java.util.Arrays::parallelSort, faster by 1.86%
Small Numbers       10000000   219.5425                            202.4076                            Winner: java.util.Arrays::parallelSort, faster by 7.80%
Large Numbers       10000000   198.5718                            207.4948                            Winner: custom.sorts.CustomSort::sort, faster by 4.30%
Equal Distrib       10000000   207.7439                            217.2603                            Winner: custom.sorts.CustomSort::sort, faster by 4.38%
Unequal Distrib     10000000   206.5699                            222.8127                            Winner: custom.sorts.CustomSort::sort, faster by 7.29%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.11                    366/1350 wins  
java.util.Arrays::parallelSort     4.20                     66/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.91% better than java.util.Arrays::parallelSort     



iteration 17/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     2.0942                              2.1010                              Winner: custom.sorts.CustomSort::sort, faster by 0.32%
Random Narrow       100000     2.2778                              1.9093                              Winner: java.util.Arrays::parallelSort, faster by 16.18%
Nearly Sorted       100000     0.7368                              0.7887                              Winner: custom.sorts.CustomSort::sort, faster by 6.57%
Reverse Sorted      100000     0.1197                              0.1576                              Winner: custom.sorts.CustomSort::sort, faster by 24.08%
High Variance       100000     1.7297                              1.8187                              Winner: custom.sorts.CustomSort::sort, faster by 4.89%
Small Numbers       100000     1.7272                              1.9976                              Winner: custom.sorts.CustomSort::sort, faster by 13.53%
Large Numbers       100000     1.7911                              1.9163                              Winner: custom.sorts.CustomSort::sort, faster by 6.53%
Equal Distrib       100000     1.6994                              1.7959                              Winner: custom.sorts.CustomSort::sort, faster by 5.37%
Unequal Distrib     100000     1.6831                              1.9575                              Winner: custom.sorts.CustomSort::sort, faster by 14.02%
Random Wide         1000000    18.7733                             18.5731                             Winner: java.util.Arrays::parallelSort, faster by 1.07%
Random Narrow       1000000    19.2225                             19.7815                             Winner: custom.sorts.CustomSort::sort, faster by 2.83%
Nearly Sorted       1000000    6.6806                              8.1628                              Winner: custom.sorts.CustomSort::sort, faster by 18.16%
Reverse Sorted      1000000    0.9209                              1.5293                              Winner: custom.sorts.CustomSort::sort, faster by 39.78%
High Variance       1000000    18.8551                             18.9247                             Winner: custom.sorts.CustomSort::sort, faster by 0.37%
Small Numbers       1000000    17.7325                             20.3145                             Winner: custom.sorts.CustomSort::sort, faster by 12.71%
Large Numbers       1000000    18.7129                             18.1271                             Winner: java.util.Arrays::parallelSort, faster by 3.13%
Equal Distrib       1000000    18.1907                             20.1632                             Winner: custom.sorts.CustomSort::sort, faster by 9.78%
Unequal Distrib     1000000    18.9620                             21.3658                             Winner: custom.sorts.CustomSort::sort, faster by 11.25%
Random Wide         10000000   198.0525                            201.7820                            Winner: custom.sorts.CustomSort::sort, faster by 1.85%
Random Narrow       10000000   195.6160                            211.8774                            Winner: custom.sorts.CustomSort::sort, faster by 7.67%
Nearly Sorted       10000000   76.2506                             91.1123                             Winner: custom.sorts.CustomSort::sort, faster by 16.31%
Reverse Sorted      10000000   7.1821                              14.0812                             Winner: custom.sorts.CustomSort::sort, faster by 49.00%
High Variance       10000000   198.1109                            217.6548                            Winner: custom.sorts.CustomSort::sort, faster by 8.98%
Small Numbers       10000000   205.0699                            204.7935                            Winner: java.util.Arrays::parallelSort, faster by 0.13%
Large Numbers       10000000   194.8870                            209.6569                            Winner: custom.sorts.CustomSort::sort, faster by 7.04%
Equal Distrib       10000000   218.0924                            207.7830                            Winner: java.util.Arrays::parallelSort, faster by 4.73%
Unequal Distrib     10000000   201.3997                            217.0017                            Winner: custom.sorts.CustomSort::sort, faster by 7.19%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.11                    388/1350 wins  
java.util.Arrays::parallelSort     4.26                     71/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.86% better than java.util.Arrays::parallelSort     



iteration 18/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8406                              1.8009                              Winner: java.util.Arrays::parallelSort, faster by 2.16%
Random Narrow       100000     1.7880                              1.8379                              Winner: custom.sorts.CustomSort::sort, faster by 2.71%
Nearly Sorted       100000     0.7212                              0.7578                              Winner: custom.sorts.CustomSort::sort, faster by 4.82%
Reverse Sorted      100000     0.1409                              0.1577                              Winner: custom.sorts.CustomSort::sort, faster by 10.64%
High Variance       100000     1.7588                              2.0286                              Winner: custom.sorts.CustomSort::sort, faster by 13.30%
Small Numbers       100000     1.7302                              1.8890                              Winner: custom.sorts.CustomSort::sort, faster by 8.41%
Large Numbers       100000     1.6152                              1.7465                              Winner: custom.sorts.CustomSort::sort, faster by 7.52%
Equal Distrib       100000     1.8020                              1.7289                              Winner: java.util.Arrays::parallelSort, faster by 4.06%
Unequal Distrib     100000     1.7397                              1.8063                              Winner: custom.sorts.CustomSort::sort, faster by 3.69%
Random Wide         1000000    18.8003                             19.8650                             Winner: custom.sorts.CustomSort::sort, faster by 5.36%
Random Narrow       1000000    17.6746                             20.5941                             Winner: custom.sorts.CustomSort::sort, faster by 14.18%
Nearly Sorted       1000000    6.8472                              7.8974                              Winner: custom.sorts.CustomSort::sort, faster by 13.30%
Reverse Sorted      1000000    0.9025                              1.4252                              Winner: custom.sorts.CustomSort::sort, faster by 36.68%
High Variance       1000000    16.7424                             20.3834                             Winner: custom.sorts.CustomSort::sort, faster by 17.86%
Small Numbers       1000000    20.1666                             19.5071                             Winner: java.util.Arrays::parallelSort, faster by 3.27%
Large Numbers       1000000    17.6047                             18.8334                             Winner: custom.sorts.CustomSort::sort, faster by 6.52%
Equal Distrib       1000000    19.6614                             18.8153                             Winner: java.util.Arrays::parallelSort, faster by 4.30%
Unequal Distrib     1000000    17.7515                             19.9983                             Winner: custom.sorts.CustomSort::sort, faster by 11.24%
Random Wide         10000000   213.6898                            209.5023                            Winner: java.util.Arrays::parallelSort, faster by 1.96%
Random Narrow       10000000   200.2927                            197.2682                            Winner: java.util.Arrays::parallelSort, faster by 1.51%
Nearly Sorted       10000000   75.9538                             89.9339                             Winner: custom.sorts.CustomSort::sort, faster by 15.54%
Reverse Sorted      10000000   7.0136                              14.3122                             Winner: custom.sorts.CustomSort::sort, faster by 51.00%
High Variance       10000000   198.2484                            204.6508                            Winner: custom.sorts.CustomSort::sort, faster by 3.13%
Small Numbers       10000000   200.1242                            218.3914                            Winner: custom.sorts.CustomSort::sort, faster by 8.36%
Large Numbers       10000000   206.9653                            217.0511                            Winner: custom.sorts.CustomSort::sort, faster by 4.65%
Equal Distrib       10000000   203.5830                            229.7663                            Winner: custom.sorts.CustomSort::sort, faster by 11.40%
Unequal Distrib     10000000   190.6663                            218.8274                            Winner: custom.sorts.CustomSort::sort, faster by 12.87%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.13                    409/1350 wins  
java.util.Arrays::parallelSort     4.15                     77/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.99% better than java.util.Arrays::parallelSort     



iteration 19/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9485                              1.8826                              Winner: java.util.Arrays::parallelSort, faster by 3.38%
Random Narrow       100000     1.7386                              1.9296                              Winner: custom.sorts.CustomSort::sort, faster by 9.90%
Nearly Sorted       100000     0.7351                              0.8836                              Winner: custom.sorts.CustomSort::sort, faster by 16.81%
Reverse Sorted      100000     0.1303                              0.1680                              Winner: custom.sorts.CustomSort::sort, faster by 22.44%
High Variance       100000     1.6977                              1.7937                              Winner: custom.sorts.CustomSort::sort, faster by 5.35%
Small Numbers       100000     1.7761                              1.7056                              Winner: java.util.Arrays::parallelSort, faster by 3.97%
Large Numbers       100000     1.7161                              1.8353                              Winner: custom.sorts.CustomSort::sort, faster by 6.50%
Equal Distrib       100000     1.8267                              1.8288                              Winner: custom.sorts.CustomSort::sort, faster by 0.11%
Unequal Distrib     100000     1.6535                              1.8714                              Winner: custom.sorts.CustomSort::sort, faster by 11.65%
Random Wide         1000000    18.7417                             19.9245                             Winner: custom.sorts.CustomSort::sort, faster by 5.94%
Random Narrow       1000000    18.8831                             20.0587                             Winner: custom.sorts.CustomSort::sort, faster by 5.86%
Nearly Sorted       1000000    6.8206                              8.6284                              Winner: custom.sorts.CustomSort::sort, faster by 20.95%
Reverse Sorted      1000000    0.9456                              1.6421                              Winner: custom.sorts.CustomSort::sort, faster by 42.42%
High Variance       1000000    16.6702                             18.3214                             Winner: custom.sorts.CustomSort::sort, faster by 9.01%
Small Numbers       1000000    17.1041                             19.2553                             Winner: custom.sorts.CustomSort::sort, faster by 11.17%
Large Numbers       1000000    17.6966                             18.7651                             Winner: custom.sorts.CustomSort::sort, faster by 5.69%
Equal Distrib       1000000    18.3394                             19.4353                             Winner: custom.sorts.CustomSort::sort, faster by 5.64%
Unequal Distrib     1000000    17.5324                             19.2228                             Winner: custom.sorts.CustomSort::sort, faster by 8.79%
Random Wide         10000000   205.3961                            218.5881                            Winner: custom.sorts.CustomSort::sort, faster by 6.04%
Random Narrow       10000000   200.1041                            203.2780                            Winner: custom.sorts.CustomSort::sort, faster by 1.56%
Nearly Sorted       10000000   75.8705                             94.2169                             Winner: custom.sorts.CustomSort::sort, faster by 19.47%
Reverse Sorted      10000000   6.7719                              14.0505                             Winner: custom.sorts.CustomSort::sort, faster by 51.80%
High Variance       10000000   203.2906                            204.2845                            Winner: custom.sorts.CustomSort::sort, faster by 0.49%
Small Numbers       10000000   205.4994                            205.9735                            Winner: custom.sorts.CustomSort::sort, faster by 0.23%
Large Numbers       10000000   208.0226                            213.4405                            Winner: custom.sorts.CustomSort::sort, faster by 2.54%
Equal Distrib       10000000   192.3490                            205.2699                            Winner: custom.sorts.CustomSort::sort, faster by 6.29%
Unequal Distrib     10000000   197.7066                            208.7053                            Winner: custom.sorts.CustomSort::sort, faster by 5.27%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.09                    434/1350 wins  
java.util.Arrays::parallelSort     4.14                     79/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.95% better than java.util.Arrays::parallelSort     



iteration 20/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8482                              1.9383                              Winner: custom.sorts.CustomSort::sort, faster by 4.65%
Random Narrow       100000     1.7155                              1.8353                              Winner: custom.sorts.CustomSort::sort, faster by 6.53%
Nearly Sorted       100000     0.7040                              0.7460                              Winner: custom.sorts.CustomSort::sort, faster by 5.63%
Reverse Sorted      100000     0.1420                              0.1574                              Winner: custom.sorts.CustomSort::sort, faster by 9.81%
High Variance       100000     1.6985                              1.9874                              Winner: custom.sorts.CustomSort::sort, faster by 14.54%
Small Numbers       100000     1.8426                              1.8374                              Winner: java.util.Arrays::parallelSort, faster by 0.28%
Large Numbers       100000     1.6583                              1.7929                              Winner: custom.sorts.CustomSort::sort, faster by 7.51%
Equal Distrib       100000     1.6714                              1.8808                              Winner: custom.sorts.CustomSort::sort, faster by 11.13%
Unequal Distrib     100000     1.7020                              1.7601                              Winner: custom.sorts.CustomSort::sort, faster by 3.30%
Random Wide         1000000    17.7668                             19.7398                             Winner: custom.sorts.CustomSort::sort, faster by 9.99%
Random Narrow       1000000    18.0537                             19.6578                             Winner: custom.sorts.CustomSort::sort, faster by 8.16%
Nearly Sorted       1000000    6.8911                              8.0472                              Winner: custom.sorts.CustomSort::sort, faster by 14.37%
Reverse Sorted      1000000    0.9394                              1.6055                              Winner: custom.sorts.CustomSort::sort, faster by 41.49%
High Variance       1000000    18.1631                             18.3882                             Winner: custom.sorts.CustomSort::sort, faster by 1.22%
Small Numbers       1000000    17.0105                             18.5281                             Winner: custom.sorts.CustomSort::sort, faster by 8.19%
Large Numbers       1000000    18.8902                             20.0720                             Winner: custom.sorts.CustomSort::sort, faster by 5.89%
Equal Distrib       1000000    19.0004                             19.1575                             Winner: custom.sorts.CustomSort::sort, faster by 0.82%
Unequal Distrib     1000000    19.0050                             20.6011                             Winner: custom.sorts.CustomSort::sort, faster by 7.75%
Random Wide         10000000   204.9887                            212.7469                            Winner: custom.sorts.CustomSort::sort, faster by 3.65%
Random Narrow       10000000   205.9862                            218.6585                            Winner: custom.sorts.CustomSort::sort, faster by 5.80%
Nearly Sorted       10000000   75.7947                             92.2907                             Winner: custom.sorts.CustomSort::sort, faster by 17.87%
Reverse Sorted      10000000   6.3839                              14.3552                             Winner: custom.sorts.CustomSort::sort, faster by 55.53%
High Variance       10000000   203.4577                            210.9023                            Winner: custom.sorts.CustomSort::sort, faster by 3.53%
Small Numbers       10000000   202.3146                            203.7284                            Winner: custom.sorts.CustomSort::sort, faster by 0.69%
Large Numbers       10000000   209.1350                            209.9578                            Winner: custom.sorts.CustomSort::sort, faster by 0.39%
Equal Distrib       10000000   188.3912                            215.8545                            Winner: custom.sorts.CustomSort::sort, faster by 12.72%
Unequal Distrib     10000000   196.8214                            202.6788                            Winner: custom.sorts.CustomSort::sort, faster by 2.89%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      11.98                    460/1350 wins  
java.util.Arrays::parallelSort     4.09                     80/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.89% better than java.util.Arrays::parallelSort     



iteration 21/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9073                              1.9223                              Winner: custom.sorts.CustomSort::sort, faster by 0.78%
Random Narrow       100000     1.8774                              1.8548                              Winner: java.util.Arrays::parallelSort, faster by 1.21%
Nearly Sorted       100000     0.6965                              0.7838                              Winner: custom.sorts.CustomSort::sort, faster by 11.14%
Reverse Sorted      100000     0.1281                              0.1565                              Winner: custom.sorts.CustomSort::sort, faster by 18.17%
High Variance       100000     1.7251                              1.8420                              Winner: custom.sorts.CustomSort::sort, faster by 6.35%
Small Numbers       100000     1.7335                              1.8977                              Winner: custom.sorts.CustomSort::sort, faster by 8.65%
Large Numbers       100000     1.7283                              1.7432                              Winner: custom.sorts.CustomSort::sort, faster by 0.86%
Equal Distrib       100000     1.7942                              1.9428                              Winner: custom.sorts.CustomSort::sort, faster by 7.65%
Unequal Distrib     100000     1.6193                              1.8308                              Winner: custom.sorts.CustomSort::sort, faster by 11.56%
Random Wide         1000000    17.4071                             19.8267                             Winner: custom.sorts.CustomSort::sort, faster by 12.20%
Random Narrow       1000000    17.2754                             20.5555                             Winner: custom.sorts.CustomSort::sort, faster by 15.96%
Nearly Sorted       1000000    6.9323                              8.0645                              Winner: custom.sorts.CustomSort::sort, faster by 14.04%
Reverse Sorted      1000000    0.8638                              1.4814                              Winner: custom.sorts.CustomSort::sort, faster by 41.69%
High Variance       1000000    17.9991                             18.4875                             Winner: custom.sorts.CustomSort::sort, faster by 2.64%
Small Numbers       1000000    18.8821                             18.9279                             Winner: custom.sorts.CustomSort::sort, faster by 0.24%
Large Numbers       1000000    19.5409                             18.5181                             Winner: java.util.Arrays::parallelSort, faster by 5.23%
Equal Distrib       1000000    18.8585                             20.0894                             Winner: custom.sorts.CustomSort::sort, faster by 6.13%
Unequal Distrib     1000000    16.8608                             19.3303                             Winner: custom.sorts.CustomSort::sort, faster by 12.78%
Random Wide         10000000   219.8015                            196.4421                            Winner: java.util.Arrays::parallelSort, faster by 10.63%
Random Narrow       10000000   200.5709                            230.8284                            Winner: custom.sorts.CustomSort::sort, faster by 13.11%
Nearly Sorted       10000000   77.3058                             92.6657                             Winner: custom.sorts.CustomSort::sort, faster by 16.58%
Reverse Sorted      10000000   6.6398                              14.1075                             Winner: custom.sorts.CustomSort::sort, faster by 52.93%
High Variance       10000000   202.2725                            200.7044                            Winner: java.util.Arrays::parallelSort, faster by 0.78%
Small Numbers       10000000   191.5476                            211.2666                            Winner: custom.sorts.CustomSort::sort, faster by 9.33%
Large Numbers       10000000   201.2202                            204.9722                            Winner: custom.sorts.CustomSort::sort, faster by 1.83%
Equal Distrib       10000000   189.3548                            217.4334                            Winner: custom.sorts.CustomSort::sort, faster by 12.91%
Unequal Distrib     10000000   204.3033                            223.2046                            Winner: custom.sorts.CustomSort::sort, faster by 8.47%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.00                    483/1350 wins  
java.util.Arrays::parallelSort     4.11                     84/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       7.89% better than java.util.Arrays::parallelSort     



iteration 22/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9720                              2.0465                              Winner: custom.sorts.CustomSort::sort, faster by 3.64%
Random Narrow       100000     1.8820                              1.8456                              Winner: java.util.Arrays::parallelSort, faster by 1.94%
Nearly Sorted       100000     0.7470                              0.7622                              Winner: custom.sorts.CustomSort::sort, faster by 1.99%
Reverse Sorted      100000     0.1284                              0.1582                              Winner: custom.sorts.CustomSort::sort, faster by 18.81%
High Variance       100000     1.6866                              1.9880                              Winner: custom.sorts.CustomSort::sort, faster by 15.16%
Small Numbers       100000     1.7280                              1.7746                              Winner: custom.sorts.CustomSort::sort, faster by 2.63%
Large Numbers       100000     1.7518                              1.8864                              Winner: custom.sorts.CustomSort::sort, faster by 7.14%
Equal Distrib       100000     1.7015                              1.9205                              Winner: custom.sorts.CustomSort::sort, faster by 11.40%
Unequal Distrib     100000     1.6671                              1.7380                              Winner: custom.sorts.CustomSort::sort, faster by 4.08%
Random Wide         1000000    16.5602                             19.8219                             Winner: custom.sorts.CustomSort::sort, faster by 16.46%
Random Narrow       1000000    17.9204                             18.3499                             Winner: custom.sorts.CustomSort::sort, faster by 2.34%
Nearly Sorted       1000000    6.6784                              8.0862                              Winner: custom.sorts.CustomSort::sort, faster by 17.41%
Reverse Sorted      1000000    0.8766                              1.6069                              Winner: custom.sorts.CustomSort::sort, faster by 45.45%
High Variance       1000000    17.3239                             19.0162                             Winner: custom.sorts.CustomSort::sort, faster by 8.90%
Small Numbers       1000000    17.6049                             18.3315                             Winner: custom.sorts.CustomSort::sort, faster by 3.96%
Large Numbers       1000000    16.8634                             18.6910                             Winner: custom.sorts.CustomSort::sort, faster by 9.78%
Equal Distrib       1000000    18.3879                             19.7255                             Winner: custom.sorts.CustomSort::sort, faster by 6.78%
Unequal Distrib     1000000    17.0596                             19.5962                             Winner: custom.sorts.CustomSort::sort, faster by 12.94%
Random Wide         10000000   196.4429                            229.8148                            Winner: custom.sorts.CustomSort::sort, faster by 14.52%
Random Narrow       10000000   208.8098                            227.4553                            Winner: custom.sorts.CustomSort::sort, faster by 8.20%
Nearly Sorted       10000000   74.9981                             101.8262                            Winner: custom.sorts.CustomSort::sort, faster by 26.35%
Reverse Sorted      10000000   6.7396                              14.1797                             Winner: custom.sorts.CustomSort::sort, faster by 52.47%
High Variance       10000000   215.8784                            206.1929                            Winner: java.util.Arrays::parallelSort, faster by 4.49%
Small Numbers       10000000   217.4752                            212.4276                            Winner: java.util.Arrays::parallelSort, faster by 2.32%
Large Numbers       10000000   204.3995                            216.3700                            Winner: custom.sorts.CustomSort::sort, faster by 5.53%
Equal Distrib       10000000   196.3111                            228.4016                            Winner: custom.sorts.CustomSort::sort, faster by 14.05%
Unequal Distrib     10000000   184.8719                            224.2901                            Winner: custom.sorts.CustomSort::sort, faster by 17.57%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.08                    507/1350 wins  
java.util.Arrays::parallelSort     4.07                     87/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       8.01% better than java.util.Arrays::parallelSort     



iteration 23/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9055                              1.9357                              Winner: custom.sorts.CustomSort::sort, faster by 1.56%
Random Narrow       100000     1.7616                              1.7928                              Winner: custom.sorts.CustomSort::sort, faster by 1.74%
Nearly Sorted       100000     0.7102                              0.7743                              Winner: custom.sorts.CustomSort::sort, faster by 8.28%
Reverse Sorted      100000     0.1292                              0.1571                              Winner: custom.sorts.CustomSort::sort, faster by 17.78%
High Variance       100000     1.6521                              1.8028                              Winner: custom.sorts.CustomSort::sort, faster by 8.36%
Small Numbers       100000     1.6425                              1.8924                              Winner: custom.sorts.CustomSort::sort, faster by 13.21%
Large Numbers       100000     1.6460                              1.9753                              Winner: custom.sorts.CustomSort::sort, faster by 16.67%
Equal Distrib       100000     1.7172                              1.7065                              Winner: java.util.Arrays::parallelSort, faster by 0.62%
Unequal Distrib     100000     1.6761                              1.8044                              Winner: custom.sorts.CustomSort::sort, faster by 7.11%
Random Wide         1000000    17.3141                             20.0445                             Winner: custom.sorts.CustomSort::sort, faster by 13.62%
Random Narrow       1000000    19.6789                             18.1927                             Winner: java.util.Arrays::parallelSort, faster by 7.55%
Nearly Sorted       1000000    6.7680                              8.0190                              Winner: custom.sorts.CustomSort::sort, faster by 15.60%
Reverse Sorted      1000000    0.8291                              1.4582                              Winner: custom.sorts.CustomSort::sort, faster by 43.15%
High Variance       1000000    17.6551                             18.9502                             Winner: custom.sorts.CustomSort::sort, faster by 6.83%
Small Numbers       1000000    17.4394                             18.9477                             Winner: custom.sorts.CustomSort::sort, faster by 7.96%
Large Numbers       1000000    19.2145                             17.8845                             Winner: java.util.Arrays::parallelSort, faster by 6.92%
Equal Distrib       1000000    18.9693                             20.5185                             Winner: custom.sorts.CustomSort::sort, faster by 7.55%
Unequal Distrib     1000000    17.9694                             19.4821                             Winner: custom.sorts.CustomSort::sort, faster by 7.76%
Random Wide         10000000   208.5925                            209.9865                            Winner: custom.sorts.CustomSort::sort, faster by 0.66%
Random Narrow       10000000   196.1378                            206.9469                            Winner: custom.sorts.CustomSort::sort, faster by 5.22%
Nearly Sorted       10000000   76.0534                             91.3393                             Winner: custom.sorts.CustomSort::sort, faster by 16.74%
Reverse Sorted      10000000   6.3201                              14.0798                             Winner: custom.sorts.CustomSort::sort, faster by 55.11%
High Variance       10000000   202.2887                            216.4773                            Winner: custom.sorts.CustomSort::sort, faster by 6.55%
Small Numbers       10000000   212.3216                            203.9718                            Winner: java.util.Arrays::parallelSort, faster by 3.93%
Large Numbers       10000000   201.3407                            204.6125                            Winner: custom.sorts.CustomSort::sort, faster by 1.60%
Equal Distrib       10000000   205.9744                            225.5620                            Winner: custom.sorts.CustomSort::sort, faster by 8.68%
Unequal Distrib     10000000   204.4102                            204.3353                            Winner: java.util.Arrays::parallelSort, faster by 0.04%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.09                    529/1350 wins  
java.util.Arrays::parallelSort     4.05                     92/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       8.04% better than java.util.Arrays::parallelSort     



iteration 24/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9380                              2.0123                              Winner: custom.sorts.CustomSort::sort, faster by 3.69%
Random Narrow       100000     1.7774                              2.0325                              Winner: custom.sorts.CustomSort::sort, faster by 12.55%
Nearly Sorted       100000     0.6878                              0.7784                              Winner: custom.sorts.CustomSort::sort, faster by 11.64%
Reverse Sorted      100000     0.1311                              0.1569                              Winner: custom.sorts.CustomSort::sort, faster by 16.49%
High Variance       100000     1.7289                              1.8049                              Winner: custom.sorts.CustomSort::sort, faster by 4.21%
Small Numbers       100000     1.6502                              1.9183                              Winner: custom.sorts.CustomSort::sort, faster by 13.98%
Large Numbers       100000     1.6147                              1.7702                              Winner: custom.sorts.CustomSort::sort, faster by 8.79%
Equal Distrib       100000     1.6714                              1.9449                              Winner: custom.sorts.CustomSort::sort, faster by 14.06%
Unequal Distrib     100000     1.6826                              1.8335                              Winner: custom.sorts.CustomSort::sort, faster by 8.23%
Random Wide         1000000    18.0896                             19.8429                             Winner: custom.sorts.CustomSort::sort, faster by 8.84%
Random Narrow       1000000    18.5726                             19.0228                             Winner: custom.sorts.CustomSort::sort, faster by 2.37%
Nearly Sorted       1000000    6.8803                              7.9728                              Winner: custom.sorts.CustomSort::sort, faster by 13.70%
Reverse Sorted      1000000    0.8574                              1.4652                              Winner: custom.sorts.CustomSort::sort, faster by 41.48%
High Variance       1000000    18.0967                             20.0902                             Winner: custom.sorts.CustomSort::sort, faster by 9.92%
Small Numbers       1000000    19.2102                             19.3500                             Winner: custom.sorts.CustomSort::sort, faster by 0.72%
Large Numbers       1000000    19.9566                             18.0681                             Winner: java.util.Arrays::parallelSort, faster by 9.46%
Equal Distrib       1000000    17.9029                             18.9777                             Winner: custom.sorts.CustomSort::sort, faster by 5.66%
Unequal Distrib     1000000    18.5025                             17.6797                             Winner: java.util.Arrays::parallelSort, faster by 4.45%
Random Wide         10000000   212.3194                            221.6759                            Winner: custom.sorts.CustomSort::sort, faster by 4.22%
Random Narrow       10000000   195.2877                            206.7253                            Winner: custom.sorts.CustomSort::sort, faster by 5.53%
Nearly Sorted       10000000   76.3816                             91.4859                             Winner: custom.sorts.CustomSort::sort, faster by 16.51%
Reverse Sorted      10000000   6.6175                              14.1292                             Winner: custom.sorts.CustomSort::sort, faster by 53.16%
High Variance       10000000   202.7457                            202.3407                            Winner: java.util.Arrays::parallelSort, faster by 0.20%
Small Numbers       10000000   211.0729                            218.4577                            Winner: custom.sorts.CustomSort::sort, faster by 3.38%
Large Numbers       10000000   209.9851                            212.1184                            Winner: custom.sorts.CustomSort::sort, faster by 1.01%
Equal Distrib       10000000   205.2886                            218.8349                            Winner: custom.sorts.CustomSort::sort, faster by 6.19%
Unequal Distrib     10000000   191.6860                            221.1318                            Winner: custom.sorts.CustomSort::sort, faster by 13.32%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.07                    553/1350 wins  
java.util.Arrays::parallelSort     4.07                     95/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       8.00% better than java.util.Arrays::parallelSort     



iteration 25/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9497                              1.9564                              Winner: custom.sorts.CustomSort::sort, faster by 0.34%
Random Narrow       100000     1.7477                              1.7470                              Winner: java.util.Arrays::parallelSort, faster by 0.04%
Nearly Sorted       100000     0.6830                              0.7523                              Winner: custom.sorts.CustomSort::sort, faster by 9.20%
Reverse Sorted      100000     0.1271                              0.1591                              Winner: custom.sorts.CustomSort::sort, faster by 20.16%
High Variance       100000     1.6973                              1.9182                              Winner: custom.sorts.CustomSort::sort, faster by 11.51%
Small Numbers       100000     1.6957                              1.7424                              Winner: custom.sorts.CustomSort::sort, faster by 2.68%
Large Numbers       100000     1.5535                              1.8701                              Winner: custom.sorts.CustomSort::sort, faster by 16.93%
Equal Distrib       100000     1.9689                              2.0201                              Winner: custom.sorts.CustomSort::sort, faster by 2.53%
Unequal Distrib     100000     1.8312                              2.3338                              Winner: custom.sorts.CustomSort::sort, faster by 21.54%
Random Wide         1000000    16.9611                             19.0739                             Winner: custom.sorts.CustomSort::sort, faster by 11.08%
Random Narrow       1000000    17.1854                             18.0562                             Winner: custom.sorts.CustomSort::sort, faster by 4.82%
Nearly Sorted       1000000    6.8047                              8.0683                              Winner: custom.sorts.CustomSort::sort, faster by 15.66%
Reverse Sorted      1000000    0.8918                              1.4645                              Winner: custom.sorts.CustomSort::sort, faster by 39.10%
High Variance       1000000    18.3400                             19.9201                             Winner: custom.sorts.CustomSort::sort, faster by 7.93%
Small Numbers       1000000    18.0742                             20.0950                             Winner: custom.sorts.CustomSort::sort, faster by 10.06%
Large Numbers       1000000    18.0980                             19.2093                             Winner: custom.sorts.CustomSort::sort, faster by 5.79%
Equal Distrib       1000000    17.5940                             19.3670                             Winner: custom.sorts.CustomSort::sort, faster by 9.16%
Unequal Distrib     1000000    17.6666                             20.3016                             Winner: custom.sorts.CustomSort::sort, faster by 12.98%
Random Wide         10000000   206.7177                            203.8749                            Winner: java.util.Arrays::parallelSort, faster by 1.38%
Random Narrow       10000000   198.2294                            208.5397                            Winner: custom.sorts.CustomSort::sort, faster by 4.94%
Nearly Sorted       10000000   75.7568                             93.5999                             Winner: custom.sorts.CustomSort::sort, faster by 19.06%
Reverse Sorted      10000000   6.4319                              14.6539                             Winner: custom.sorts.CustomSort::sort, faster by 56.11%
High Variance       10000000   199.1620                            210.8078                            Winner: custom.sorts.CustomSort::sort, faster by 5.52%
Small Numbers       10000000   197.5459                            204.4876                            Winner: custom.sorts.CustomSort::sort, faster by 3.39%
Large Numbers       10000000   202.6132                            205.4323                            Winner: custom.sorts.CustomSort::sort, faster by 1.37%
Equal Distrib       10000000   207.3538                            216.1800                            Winner: custom.sorts.CustomSort::sort, faster by 4.08%
Unequal Distrib     10000000   193.0952                            223.4720                            Winner: custom.sorts.CustomSort::sort, faster by 13.59%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.08                    578/1350 wins  
java.util.Arrays::parallelSort     4.00                     97/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       8.08% better than java.util.Arrays::parallelSort     



iteration 26/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8963                              1.9617                              Winner: custom.sorts.CustomSort::sort, faster by 3.33%
Random Narrow       100000     1.7505                              1.9943                              Winner: custom.sorts.CustomSort::sort, faster by 12.23%
Nearly Sorted       100000     0.6829                              0.7660                              Winner: custom.sorts.CustomSort::sort, faster by 10.85%
Reverse Sorted      100000     0.1245                              0.1573                              Winner: custom.sorts.CustomSort::sort, faster by 20.90%
High Variance       100000     1.6639                              1.7749                              Winner: custom.sorts.CustomSort::sort, faster by 6.25%
Small Numbers       100000     1.6376                              1.8661                              Winner: custom.sorts.CustomSort::sort, faster by 12.24%
Large Numbers       100000     1.6503                              1.9346                              Winner: custom.sorts.CustomSort::sort, faster by 14.70%
Equal Distrib       100000     1.8206                              1.9558                              Winner: custom.sorts.CustomSort::sort, faster by 6.91%
Unequal Distrib     100000     1.7359                              1.8212                              Winner: custom.sorts.CustomSort::sort, faster by 4.69%
Random Wide         1000000    18.5134                             18.9751                             Winner: custom.sorts.CustomSort::sort, faster by 2.43%
Random Narrow       1000000    17.5333                             20.8793                             Winner: custom.sorts.CustomSort::sort, faster by 16.03%
Nearly Sorted       1000000    6.8480                              7.9456                              Winner: custom.sorts.CustomSort::sort, faster by 13.81%
Reverse Sorted      1000000    0.8396                              1.4253                              Winner: custom.sorts.CustomSort::sort, faster by 41.09%
High Variance       1000000    17.4879                             19.3935                             Winner: custom.sorts.CustomSort::sort, faster by 9.83%
Small Numbers       1000000    17.6786                             18.0982                             Winner: custom.sorts.CustomSort::sort, faster by 2.32%
Large Numbers       1000000    19.1312                             18.9606                             Winner: java.util.Arrays::parallelSort, faster by 0.89%
Equal Distrib       1000000    17.9414                             19.2573                             Winner: custom.sorts.CustomSort::sort, faster by 6.83%
Unequal Distrib     1000000    17.9367                             19.3132                             Winner: custom.sorts.CustomSort::sort, faster by 7.13%
Random Wide         10000000   201.0158                            215.1504                            Winner: custom.sorts.CustomSort::sort, faster by 6.57%
Random Narrow       10000000   209.8991                            218.9428                            Winner: custom.sorts.CustomSort::sort, faster by 4.13%
Nearly Sorted       10000000   74.7974                             89.5380                             Winner: custom.sorts.CustomSort::sort, faster by 16.46%
Reverse Sorted      10000000   6.3367                              14.4964                             Winner: custom.sorts.CustomSort::sort, faster by 56.29%
High Variance       10000000   211.4374                            215.7056                            Winner: custom.sorts.CustomSort::sort, faster by 1.98%
Small Numbers       10000000   196.1570                            205.5532                            Winner: custom.sorts.CustomSort::sort, faster by 4.57%
Large Numbers       10000000   212.2688                            202.3192                            Winner: java.util.Arrays::parallelSort, faster by 4.69%
Equal Distrib       10000000   203.5336                            214.6793                            Winner: custom.sorts.CustomSort::sort, faster by 5.19%
Unequal Distrib     10000000   209.1041                            215.2750                            Winner: custom.sorts.CustomSort::sort, faster by 2.87%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.06                    603/1350 wins  
java.util.Arrays::parallelSort     3.98                     99/1350 wins   

Overall Winner: custom.sorts.CustomSort::sort       8.08% better than java.util.Arrays::parallelSort     



iteration 27/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9481                              1.9897                              Winner: custom.sorts.CustomSort::sort, faster by 2.09%
Random Narrow       100000     1.7819                              1.8023                              Winner: custom.sorts.CustomSort::sort, faster by 1.13%
Nearly Sorted       100000     0.7336                              0.7804                              Winner: custom.sorts.CustomSort::sort, faster by 6.00%
Reverse Sorted      100000     0.1220                              0.1567                              Winner: custom.sorts.CustomSort::sort, faster by 22.13%
High Variance       100000     1.7822                              1.7870                              Winner: custom.sorts.CustomSort::sort, faster by 0.27%
Small Numbers       100000     1.7757                              1.9793                              Winner: custom.sorts.CustomSort::sort, faster by 10.29%
Large Numbers       100000     1.6273                              1.7729                              Winner: custom.sorts.CustomSort::sort, faster by 8.21%
Equal Distrib       100000     1.7536                              1.7962                              Winner: custom.sorts.CustomSort::sort, faster by 2.37%
Unequal Distrib     100000     1.7193                              1.9105                              Winner: custom.sorts.CustomSort::sort, faster by 10.01%
Random Wide         1000000    20.8484                             20.1764                             Winner: java.util.Arrays::parallelSort, faster by 3.22%
Random Narrow       1000000    17.7094                             18.1524                             Winner: custom.sorts.CustomSort::sort, faster by 2.44%
Nearly Sorted       1000000    6.8253                              8.0092                              Winner: custom.sorts.CustomSort::sort, faster by 14.78%
Reverse Sorted      1000000    0.8368                              1.5308                              Winner: custom.sorts.CustomSort::sort, faster by 45.33%
High Variance       1000000    16.9720                             18.2090                             Winner: custom.sorts.CustomSort::sort, faster by 6.79%
Small Numbers       1000000    16.5842                             19.1092                             Winner: custom.sorts.CustomSort::sort, faster by 13.21%
Large Numbers       1000000    17.2801                             19.6483                             Winner: custom.sorts.CustomSort::sort, faster by 12.05%
Equal Distrib       1000000    18.6486                             18.8343                             Winner: custom.sorts.CustomSort::sort, faster by 0.99%
Unequal Distrib     1000000    16.6795                             20.2132                             Winner: custom.sorts.CustomSort::sort, faster by 17.48%
Random Wide         10000000   196.1273                            213.2120                            Winner: custom.sorts.CustomSort::sort, faster by 8.01%
Random Narrow       10000000   193.0372                            209.2141                            Winner: custom.sorts.CustomSort::sort, faster by 7.73%
Nearly Sorted       10000000   76.1904                             92.0646                             Winner: custom.sorts.CustomSort::sort, faster by 17.24%
Reverse Sorted      10000000   6.4593                              14.3395                             Winner: custom.sorts.CustomSort::sort, faster by 54.95%
High Variance       10000000   197.5575                            216.7701                            Winner: custom.sorts.CustomSort::sort, faster by 8.86%
Small Numbers       10000000   218.0734                            215.5915                            Winner: java.util.Arrays::parallelSort, faster by 1.14%
Large Numbers       10000000   192.6545                            206.5187                            Winner: custom.sorts.CustomSort::sort, faster by 6.71%
Equal Distrib       10000000   203.6597                            219.9751                            Winner: custom.sorts.CustomSort::sort, faster by 7.42%
Unequal Distrib     10000000   200.2730                            211.4418                            Winner: custom.sorts.CustomSort::sort, faster by 5.28%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.05                    628/1350 wins  
java.util.Arrays::parallelSort     3.94                     101/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.10% better than java.util.Arrays::parallelSort     



iteration 28/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8375                              2.0937                              Winner: custom.sorts.CustomSort::sort, faster by 12.24%
Random Narrow       100000     1.8311                              1.9927                              Winner: custom.sorts.CustomSort::sort, faster by 8.11%
Nearly Sorted       100000     0.6962                              0.7714                              Winner: custom.sorts.CustomSort::sort, faster by 9.76%
Reverse Sorted      100000     0.1360                              0.1574                              Winner: custom.sorts.CustomSort::sort, faster by 13.64%
High Variance       100000     1.7407                              1.7176                              Winner: java.util.Arrays::parallelSort, faster by 1.33%
Small Numbers       100000     1.7247                              1.7193                              Winner: java.util.Arrays::parallelSort, faster by 0.31%
Large Numbers       100000     1.7393                              1.7310                              Winner: java.util.Arrays::parallelSort, faster by 0.48%
Equal Distrib       100000     1.7144                              1.8425                              Winner: custom.sorts.CustomSort::sort, faster by 6.96%
Unequal Distrib     100000     1.7139                              1.8918                              Winner: custom.sorts.CustomSort::sort, faster by 9.40%
Random Wide         1000000    17.7361                             17.8558                             Winner: custom.sorts.CustomSort::sort, faster by 0.67%
Random Narrow       1000000    17.8867                             18.0654                             Winner: custom.sorts.CustomSort::sort, faster by 0.99%
Nearly Sorted       1000000    6.8075                              8.1262                              Winner: custom.sorts.CustomSort::sort, faster by 16.23%
Reverse Sorted      1000000    0.8517                              1.6083                              Winner: custom.sorts.CustomSort::sort, faster by 47.05%
High Variance       1000000    16.9520                             19.4007                             Winner: custom.sorts.CustomSort::sort, faster by 12.62%
Small Numbers       1000000    18.0182                             19.5620                             Winner: custom.sorts.CustomSort::sort, faster by 7.89%
Large Numbers       1000000    19.6800                             19.6820                             Winner: custom.sorts.CustomSort::sort, faster by 0.01%
Equal Distrib       1000000    20.0194                             18.6497                             Winner: java.util.Arrays::parallelSort, faster by 6.84%
Unequal Distrib     1000000    19.3601                             18.9783                             Winner: java.util.Arrays::parallelSort, faster by 1.97%
Random Wide         10000000   206.8658                            215.8347                            Winner: custom.sorts.CustomSort::sort, faster by 4.16%
Random Narrow       10000000   193.4463                            207.1974                            Winner: custom.sorts.CustomSort::sort, faster by 6.64%
Nearly Sorted       10000000   76.0747                             91.4261                             Winner: custom.sorts.CustomSort::sort, faster by 16.79%
Reverse Sorted      10000000   6.5714                              14.1160                             Winner: custom.sorts.CustomSort::sort, faster by 53.45%
High Variance       10000000   210.6705                            227.7634                            Winner: custom.sorts.CustomSort::sort, faster by 7.50%
Small Numbers       10000000   216.4315                            223.9993                            Winner: custom.sorts.CustomSort::sort, faster by 3.38%
Large Numbers       10000000   208.7885                            232.4435                            Winner: custom.sorts.CustomSort::sort, faster by 10.18%
Equal Distrib       10000000   200.1824                            216.5495                            Winner: custom.sorts.CustomSort::sort, faster by 7.56%
Unequal Distrib     10000000   195.9605                            224.3304                            Winner: custom.sorts.CustomSort::sort, faster by 12.65%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.05                    650/1350 wins  
java.util.Arrays::parallelSort     3.86                     106/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.19% better than java.util.Arrays::parallelSort     



iteration 29/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9598                              2.0300                              Winner: custom.sorts.CustomSort::sort, faster by 3.46%
Random Narrow       100000     1.9039                              1.9288                              Winner: custom.sorts.CustomSort::sort, faster by 1.29%
Nearly Sorted       100000     0.6929                              0.7831                              Winner: custom.sorts.CustomSort::sort, faster by 11.52%
Reverse Sorted      100000     0.1235                              0.1617                              Winner: custom.sorts.CustomSort::sort, faster by 23.64%
High Variance       100000     1.6557                              1.7983                              Winner: custom.sorts.CustomSort::sort, faster by 7.93%
Small Numbers       100000     1.7181                              1.8376                              Winner: custom.sorts.CustomSort::sort, faster by 6.50%
Large Numbers       100000     1.6463                              1.8680                              Winner: custom.sorts.CustomSort::sort, faster by 11.87%
Equal Distrib       100000     1.7631                              1.8657                              Winner: custom.sorts.CustomSort::sort, faster by 5.50%
Unequal Distrib     100000     1.6226                              1.8435                              Winner: custom.sorts.CustomSort::sort, faster by 11.98%
Random Wide         1000000    19.7585                             18.7038                             Winner: java.util.Arrays::parallelSort, faster by 5.34%
Random Narrow       1000000    16.5454                             19.7839                             Winner: custom.sorts.CustomSort::sort, faster by 16.37%
Nearly Sorted       1000000    6.8238                              8.0295                              Winner: custom.sorts.CustomSort::sort, faster by 15.02%
Reverse Sorted      1000000    0.8711                              1.6634                              Winner: custom.sorts.CustomSort::sort, faster by 47.63%
High Variance       1000000    18.6768                             21.8358                             Winner: custom.sorts.CustomSort::sort, faster by 14.47%
Small Numbers       1000000    18.0718                             19.4114                             Winner: custom.sorts.CustomSort::sort, faster by 6.90%
Large Numbers       1000000    18.4395                             18.3543                             Winner: java.util.Arrays::parallelSort, faster by 0.46%
Equal Distrib       1000000    17.6691                             19.0583                             Winner: custom.sorts.CustomSort::sort, faster by 7.29%
Unequal Distrib     1000000    19.9677                             18.4810                             Winner: java.util.Arrays::parallelSort, faster by 7.45%
Random Wide         10000000   192.9574                            210.0014                            Winner: custom.sorts.CustomSort::sort, faster by 8.12%
Random Narrow       10000000   202.5318                            214.6209                            Winner: custom.sorts.CustomSort::sort, faster by 5.63%
Nearly Sorted       10000000   76.1963                             91.7523                             Winner: custom.sorts.CustomSort::sort, faster by 16.95%
Reverse Sorted      10000000   6.6337                              14.1099                             Winner: custom.sorts.CustomSort::sort, faster by 52.99%
High Variance       10000000   206.7585                            207.8394                            Winner: custom.sorts.CustomSort::sort, faster by 0.52%
Small Numbers       10000000   196.1850                            200.9223                            Winner: custom.sorts.CustomSort::sort, faster by 2.36%
Large Numbers       10000000   217.5456                            193.5825                            Winner: java.util.Arrays::parallelSort, faster by 11.02%
Equal Distrib       10000000   212.1338                            225.1385                            Winner: custom.sorts.CustomSort::sort, faster by 5.78%
Unequal Distrib     10000000   205.0229                            206.0203                            Winner: custom.sorts.CustomSort::sort, faster by 0.48%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.06                    673/1350 wins  
java.util.Arrays::parallelSort     3.94                     110/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.12% better than java.util.Arrays::parallelSort     



iteration 30/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8802                              1.9908                              Winner: custom.sorts.CustomSort::sort, faster by 5.55%
Random Narrow       100000     1.9001                              1.8566                              Winner: java.util.Arrays::parallelSort, faster by 2.29%
Nearly Sorted       100000     0.7613                              0.7691                              Winner: custom.sorts.CustomSort::sort, faster by 1.02%
Reverse Sorted      100000     0.1470                              0.1607                              Winner: custom.sorts.CustomSort::sort, faster by 8.53%
High Variance       100000     1.7950                              1.7071                              Winner: java.util.Arrays::parallelSort, faster by 4.90%
Small Numbers       100000     1.6781                              1.8682                              Winner: custom.sorts.CustomSort::sort, faster by 10.18%
Large Numbers       100000     1.7152                              1.9015                              Winner: custom.sorts.CustomSort::sort, faster by 9.79%
Equal Distrib       100000     1.7853                              1.9381                              Winner: custom.sorts.CustomSort::sort, faster by 7.88%
Unequal Distrib     100000     1.7503                              1.8172                              Winner: custom.sorts.CustomSort::sort, faster by 3.68%
Random Wide         1000000    19.8306                             18.2281                             Winner: java.util.Arrays::parallelSort, faster by 8.08%
Random Narrow       1000000    17.3713                             18.7085                             Winner: custom.sorts.CustomSort::sort, faster by 7.15%
Nearly Sorted       1000000    6.6913                              7.6573                              Winner: custom.sorts.CustomSort::sort, faster by 12.62%
Reverse Sorted      1000000    0.8373                              1.5518                              Winner: custom.sorts.CustomSort::sort, faster by 46.04%
High Variance       1000000    17.8264                             19.6560                             Winner: custom.sorts.CustomSort::sort, faster by 9.31%
Small Numbers       1000000    17.1591                             19.0584                             Winner: custom.sorts.CustomSort::sort, faster by 9.97%
Large Numbers       1000000    16.9617                             17.8866                             Winner: custom.sorts.CustomSort::sort, faster by 5.17%
Equal Distrib       1000000    17.2527                             19.3883                             Winner: custom.sorts.CustomSort::sort, faster by 11.01%
Unequal Distrib     1000000    18.1766                             19.8765                             Winner: custom.sorts.CustomSort::sort, faster by 8.55%
Random Wide         10000000   194.1887                            215.4461                            Winner: custom.sorts.CustomSort::sort, faster by 9.87%
Random Narrow       10000000   194.2140                            206.3143                            Winner: custom.sorts.CustomSort::sort, faster by 5.86%
Nearly Sorted       10000000   76.6664                             98.5285                             Winner: custom.sorts.CustomSort::sort, faster by 22.19%
Reverse Sorted      10000000   6.5913                              14.1998                             Winner: custom.sorts.CustomSort::sort, faster by 53.58%
High Variance       10000000   190.2194                            229.9920                            Winner: custom.sorts.CustomSort::sort, faster by 17.29%
Small Numbers       10000000   211.6606                            198.6272                            Winner: java.util.Arrays::parallelSort, faster by 6.16%
Large Numbers       10000000   200.2260                            216.0957                            Winner: custom.sorts.CustomSort::sort, faster by 7.34%
Equal Distrib       10000000   205.0719                            203.4846                            Winner: java.util.Arrays::parallelSort, faster by 0.77%
Unequal Distrib     10000000   207.8274                            205.0167                            Winner: java.util.Arrays::parallelSort, faster by 1.35%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.09                    694/1350 wins  
java.util.Arrays::parallelSort     3.94                     116/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.15% better than java.util.Arrays::parallelSort     



iteration 31/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8136                              1.9766                              Winner: custom.sorts.CustomSort::sort, faster by 8.25%
Random Narrow       100000     1.8110                              1.8869                              Winner: custom.sorts.CustomSort::sort, faster by 4.03%
Nearly Sorted       100000     0.6948                              0.7799                              Winner: custom.sorts.CustomSort::sort, faster by 10.90%
Reverse Sorted      100000     0.1372                              0.1601                              Winner: custom.sorts.CustomSort::sort, faster by 14.32%
High Variance       100000     1.6734                              1.8526                              Winner: custom.sorts.CustomSort::sort, faster by 9.67%
Small Numbers       100000     1.7632                              1.8616                              Winner: custom.sorts.CustomSort::sort, faster by 5.29%
Large Numbers       100000     1.7082                              1.7416                              Winner: custom.sorts.CustomSort::sort, faster by 1.92%
Equal Distrib       100000     1.8344                              2.0792                              Winner: custom.sorts.CustomSort::sort, faster by 11.77%
Unequal Distrib     100000     1.9741                              2.1773                              Winner: custom.sorts.CustomSort::sort, faster by 9.33%
Random Wide         1000000    18.0172                             18.8815                             Winner: custom.sorts.CustomSort::sort, faster by 4.58%
Random Narrow       1000000    16.9022                             20.6010                             Winner: custom.sorts.CustomSort::sort, faster by 17.95%
Nearly Sorted       1000000    6.6163                              8.1113                              Winner: custom.sorts.CustomSort::sort, faster by 18.43%
Reverse Sorted      1000000    0.8366                              1.6040                              Winner: custom.sorts.CustomSort::sort, faster by 47.85%
High Variance       1000000    18.4789                             18.9058                             Winner: custom.sorts.CustomSort::sort, faster by 2.26%
Small Numbers       1000000    17.6520                             20.7724                             Winner: custom.sorts.CustomSort::sort, faster by 15.02%
Large Numbers       1000000    19.1188                             20.2828                             Winner: custom.sorts.CustomSort::sort, faster by 5.74%
Equal Distrib       1000000    18.0767                             19.8235                             Winner: custom.sorts.CustomSort::sort, faster by 8.81%
Unequal Distrib     1000000    18.3092                             19.8057                             Winner: custom.sorts.CustomSort::sort, faster by 7.56%
Random Wide         10000000   209.8611                            220.5166                            Winner: custom.sorts.CustomSort::sort, faster by 4.83%
Random Narrow       10000000   196.1725                            218.1613                            Winner: custom.sorts.CustomSort::sort, faster by 10.08%
Nearly Sorted       10000000   76.7926                             90.6533                             Winner: custom.sorts.CustomSort::sort, faster by 15.29%
Reverse Sorted      10000000   6.4313                              14.1087                             Winner: custom.sorts.CustomSort::sort, faster by 54.42%
High Variance       10000000   213.4451                            208.8560                            Winner: java.util.Arrays::parallelSort, faster by 2.15%
Small Numbers       10000000   198.8378                            219.3235                            Winner: custom.sorts.CustomSort::sort, faster by 9.34%
Large Numbers       10000000   206.4407                            217.4129                            Winner: custom.sorts.CustomSort::sort, faster by 5.05%
Equal Distrib       10000000   211.3593                            226.1386                            Winner: custom.sorts.CustomSort::sort, faster by 6.54%
Unequal Distrib     10000000   201.8828                            221.0019                            Winner: custom.sorts.CustomSort::sort, faster by 8.65%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.09                    720/1350 wins  
java.util.Arrays::parallelSort     3.92                     117/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.17% better than java.util.Arrays::parallelSort     



iteration 32/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9893                              1.9979                              Winner: custom.sorts.CustomSort::sort, faster by 0.43%
Random Narrow       100000     1.7128                              1.8450                              Winner: custom.sorts.CustomSort::sort, faster by 7.17%
Nearly Sorted       100000     0.7603                              0.7402                              Winner: java.util.Arrays::parallelSort, faster by 2.64%
Reverse Sorted      100000     0.1305                              0.1580                              Winner: custom.sorts.CustomSort::sort, faster by 17.41%
High Variance       100000     1.7223                              1.6899                              Winner: java.util.Arrays::parallelSort, faster by 1.88%
Small Numbers       100000     1.6708                              1.7775                              Winner: custom.sorts.CustomSort::sort, faster by 6.00%
Large Numbers       100000     1.7166                              1.7557                              Winner: custom.sorts.CustomSort::sort, faster by 2.22%
Equal Distrib       100000     1.7863                              1.9400                              Winner: custom.sorts.CustomSort::sort, faster by 7.92%
Unequal Distrib     100000     1.7376                              1.8541                              Winner: custom.sorts.CustomSort::sort, faster by 6.29%
Random Wide         1000000    19.4997                             18.8536                             Winner: java.util.Arrays::parallelSort, faster by 3.31%
Random Narrow       1000000    16.1690                             18.4838                             Winner: custom.sorts.CustomSort::sort, faster by 12.52%
Nearly Sorted       1000000    6.6656                              8.1194                              Winner: custom.sorts.CustomSort::sort, faster by 17.91%
Reverse Sorted      1000000    0.8178                              1.5660                              Winner: custom.sorts.CustomSort::sort, faster by 47.78%
High Variance       1000000    18.6597                             19.3809                             Winner: custom.sorts.CustomSort::sort, faster by 3.72%
Small Numbers       1000000    17.1261                             20.2193                             Winner: custom.sorts.CustomSort::sort, faster by 15.30%
Large Numbers       1000000    19.0405                             18.3028                             Winner: java.util.Arrays::parallelSort, faster by 3.87%
Equal Distrib       1000000    19.4463                             18.5226                             Winner: java.util.Arrays::parallelSort, faster by 4.75%
Unequal Distrib     1000000    17.6862                             20.0895                             Winner: custom.sorts.CustomSort::sort, faster by 11.96%
Random Wide         10000000   214.1495                            215.2322                            Winner: custom.sorts.CustomSort::sort, faster by 0.50%
Random Narrow       10000000   197.4669                            204.3846                            Winner: custom.sorts.CustomSort::sort, faster by 3.38%
Nearly Sorted       10000000   76.2249                             91.1004                             Winner: custom.sorts.CustomSort::sort, faster by 16.33%
Reverse Sorted      10000000   6.5606                              14.5868                             Winner: custom.sorts.CustomSort::sort, faster by 55.02%
High Variance       10000000   191.2249                            205.1917                            Winner: custom.sorts.CustomSort::sort, faster by 6.81%
Small Numbers       10000000   207.3361                            202.7475                            Winner: java.util.Arrays::parallelSort, faster by 2.21%
Large Numbers       10000000   197.6995                            206.9494                            Winner: custom.sorts.CustomSort::sort, faster by 4.47%
Equal Distrib       10000000   215.0127                            217.3911                            Winner: custom.sorts.CustomSort::sort, faster by 1.09%
Unequal Distrib     10000000   203.1603                            207.6858                            Winner: custom.sorts.CustomSort::sort, faster by 2.18%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.08                    741/1350 wins  
java.util.Arrays::parallelSort     3.88                     123/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.20% better than java.util.Arrays::parallelSort     



iteration 33/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9598                              2.1186                              Winner: custom.sorts.CustomSort::sort, faster by 7.49%
Random Narrow       100000     2.0189                              2.3611                              Winner: custom.sorts.CustomSort::sort, faster by 14.49%
Nearly Sorted       100000     0.7730                              0.8408                              Winner: custom.sorts.CustomSort::sort, faster by 8.06%
Reverse Sorted      100000     0.1335                              0.1688                              Winner: custom.sorts.CustomSort::sort, faster by 20.91%
High Variance       100000     1.7818                              1.9957                              Winner: custom.sorts.CustomSort::sort, faster by 10.72%
Small Numbers       100000     1.8023                              1.9235                              Winner: custom.sorts.CustomSort::sort, faster by 6.30%
Large Numbers       100000     1.7139                              1.9095                              Winner: custom.sorts.CustomSort::sort, faster by 10.24%
Equal Distrib       100000     1.7312                              1.9161                              Winner: custom.sorts.CustomSort::sort, faster by 9.65%
Unequal Distrib     100000     1.8182                              1.8070                              Winner: java.util.Arrays::parallelSort, faster by 0.61%
Random Wide         1000000    17.1466                             21.0091                             Winner: custom.sorts.CustomSort::sort, faster by 18.38%
Random Narrow       1000000    17.8119                             20.7297                             Winner: custom.sorts.CustomSort::sort, faster by 14.08%
Nearly Sorted       1000000    6.7811                              8.0350                              Winner: custom.sorts.CustomSort::sort, faster by 15.61%
Reverse Sorted      1000000    0.9040                              1.5719                              Winner: custom.sorts.CustomSort::sort, faster by 42.49%
High Variance       1000000    16.4243                             18.5052                             Winner: custom.sorts.CustomSort::sort, faster by 11.24%
Small Numbers       1000000    18.9830                             19.2376                             Winner: custom.sorts.CustomSort::sort, faster by 1.32%
Large Numbers       1000000    17.7150                             18.9153                             Winner: custom.sorts.CustomSort::sort, faster by 6.35%
Equal Distrib       1000000    18.0064                             18.8187                             Winner: custom.sorts.CustomSort::sort, faster by 4.32%
Unequal Distrib     1000000    17.8258                             19.8580                             Winner: custom.sorts.CustomSort::sort, faster by 10.23%
Random Wide         10000000   215.6272                            214.8212                            Winner: java.util.Arrays::parallelSort, faster by 0.37%
Random Narrow       10000000   220.3519                            220.1165                            Winner: java.util.Arrays::parallelSort, faster by 0.11%
Nearly Sorted       10000000   78.3677                             92.1344                             Winner: custom.sorts.CustomSort::sort, faster by 14.94%
Reverse Sorted      10000000   7.2049                              14.2750                             Winner: custom.sorts.CustomSort::sort, faster by 49.53%
High Variance       10000000   201.3675                            219.6614                            Winner: custom.sorts.CustomSort::sort, faster by 8.33%
Small Numbers       10000000   206.8652                            211.7386                            Winner: custom.sorts.CustomSort::sort, faster by 2.30%
Large Numbers       10000000   202.5986                            230.2281                            Winner: custom.sorts.CustomSort::sort, faster by 12.00%
Equal Distrib       10000000   206.1104                            214.0837                            Winner: custom.sorts.CustomSort::sort, faster by 3.72%
Unequal Distrib     10000000   193.6807                            199.4617                            Winner: custom.sorts.CustomSort::sort, faster by 2.90%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.10                    765/1350 wins  
java.util.Arrays::parallelSort     3.80                     126/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.30% better than java.util.Arrays::parallelSort     



iteration 34/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8579                              1.8900                              Winner: custom.sorts.CustomSort::sort, faster by 1.69%
Random Narrow       100000     1.7931                              1.9236                              Winner: custom.sorts.CustomSort::sort, faster by 6.78%
Nearly Sorted       100000     0.7439                              0.7911                              Winner: custom.sorts.CustomSort::sort, faster by 5.96%
Reverse Sorted      100000     0.1348                              0.1589                              Winner: custom.sorts.CustomSort::sort, faster by 15.17%
High Variance       100000     1.7308                              1.7659                              Winner: custom.sorts.CustomSort::sort, faster by 1.99%
Small Numbers       100000     1.6953                              1.8164                              Winner: custom.sorts.CustomSort::sort, faster by 6.67%
Large Numbers       100000     1.8170                              1.8722                              Winner: custom.sorts.CustomSort::sort, faster by 2.95%
Equal Distrib       100000     1.7063                              1.7775                              Winner: custom.sorts.CustomSort::sort, faster by 4.01%
Unequal Distrib     100000     1.6582                              1.8316                              Winner: custom.sorts.CustomSort::sort, faster by 9.47%
Random Wide         1000000    19.1905                             18.4413                             Winner: java.util.Arrays::parallelSort, faster by 3.90%
Random Narrow       1000000    17.0954                             20.2176                             Winner: custom.sorts.CustomSort::sort, faster by 15.44%
Nearly Sorted       1000000    6.8990                              8.4356                              Winner: custom.sorts.CustomSort::sort, faster by 18.22%
Reverse Sorted      1000000    1.0063                              1.7278                              Winner: custom.sorts.CustomSort::sort, faster by 41.76%
High Variance       1000000    19.2485                             19.0162                             Winner: java.util.Arrays::parallelSort, faster by 1.21%
Small Numbers       1000000    18.2140                             19.7124                             Winner: custom.sorts.CustomSort::sort, faster by 7.60%
Large Numbers       1000000    17.9303                             19.4841                             Winner: custom.sorts.CustomSort::sort, faster by 7.97%
Equal Distrib       1000000    18.3120                             19.6143                             Winner: custom.sorts.CustomSort::sort, faster by 6.64%
Unequal Distrib     1000000    18.2800                             18.9055                             Winner: custom.sorts.CustomSort::sort, faster by 3.31%
Random Wide         10000000   214.9230                            214.0639                            Winner: java.util.Arrays::parallelSort, faster by 0.40%
Random Narrow       10000000   195.5468                            210.4498                            Winner: custom.sorts.CustomSort::sort, faster by 7.08%
Nearly Sorted       10000000   77.3550                             91.5917                             Winner: custom.sorts.CustomSort::sort, faster by 15.54%
Reverse Sorted      10000000   6.8292                              14.0569                             Winner: custom.sorts.CustomSort::sort, faster by 51.42%
High Variance       10000000   206.8886                            217.6689                            Winner: custom.sorts.CustomSort::sort, faster by 4.95%
Small Numbers       10000000   215.0736                            218.2382                            Winner: custom.sorts.CustomSort::sort, faster by 1.45%
Large Numbers       10000000   213.8963                            206.7899                            Winner: java.util.Arrays::parallelSort, faster by 3.32%
Equal Distrib       10000000   214.9000                            206.4977                            Winner: java.util.Arrays::parallelSort, faster by 3.91%
Unequal Distrib     10000000   208.2204                            197.5559                            Winner: java.util.Arrays::parallelSort, faster by 5.12%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.08                    786/1350 wins  
java.util.Arrays::parallelSort     3.76                     132/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.32% better than java.util.Arrays::parallelSort     



iteration 35/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9848                              1.8823                              Winner: java.util.Arrays::parallelSort, faster by 5.16%
Random Narrow       100000     1.9224                              1.8496                              Winner: java.util.Arrays::parallelSort, faster by 3.79%
Nearly Sorted       100000     0.7362                              0.7553                              Winner: custom.sorts.CustomSort::sort, faster by 2.53%
Reverse Sorted      100000     0.1296                              0.1590                              Winner: custom.sorts.CustomSort::sort, faster by 18.45%
High Variance       100000     1.6573                              1.8857                              Winner: custom.sorts.CustomSort::sort, faster by 12.11%
Small Numbers       100000     1.7025                              1.7844                              Winner: custom.sorts.CustomSort::sort, faster by 4.59%
Large Numbers       100000     1.7051                              1.8902                              Winner: custom.sorts.CustomSort::sort, faster by 9.79%
Equal Distrib       100000     1.7952                              1.9535                              Winner: custom.sorts.CustomSort::sort, faster by 8.10%
Unequal Distrib     100000     1.6858                              1.7551                              Winner: custom.sorts.CustomSort::sort, faster by 3.95%
Random Wide         1000000    19.5771                             18.0279                             Winner: java.util.Arrays::parallelSort, faster by 7.91%
Random Narrow       1000000    19.0612                             18.0378                             Winner: java.util.Arrays::parallelSort, faster by 5.37%
Nearly Sorted       1000000    6.8900                              7.9179                              Winner: custom.sorts.CustomSort::sort, faster by 12.98%
Reverse Sorted      1000000    0.8654                              1.4473                              Winner: custom.sorts.CustomSort::sort, faster by 40.20%
High Variance       1000000    17.4684                             18.7815                             Winner: custom.sorts.CustomSort::sort, faster by 6.99%
Small Numbers       1000000    18.0255                             19.1037                             Winner: custom.sorts.CustomSort::sort, faster by 5.64%
Large Numbers       1000000    18.6002                             18.5077                             Winner: java.util.Arrays::parallelSort, faster by 0.50%
Equal Distrib       1000000    17.9728                             21.0561                             Winner: custom.sorts.CustomSort::sort, faster by 14.64%
Unequal Distrib     1000000    18.7481                             18.2808                             Winner: java.util.Arrays::parallelSort, faster by 2.49%
Random Wide         10000000   208.9451                            224.8181                            Winner: custom.sorts.CustomSort::sort, faster by 7.06%
Random Narrow       10000000   213.2950                            212.7734                            Winner: java.util.Arrays::parallelSort, faster by 0.24%
Nearly Sorted       10000000   76.9104                             97.8719                             Winner: custom.sorts.CustomSort::sort, faster by 21.42%
Reverse Sorted      10000000   6.8179                              14.3295                             Winner: custom.sorts.CustomSort::sort, faster by 52.42%
High Variance       10000000   207.2489                            206.1856                            Winner: java.util.Arrays::parallelSort, faster by 0.51%
Small Numbers       10000000   199.6236                            202.1204                            Winner: custom.sorts.CustomSort::sort, faster by 1.24%
Large Numbers       10000000   194.8346                            215.8313                            Winner: custom.sorts.CustomSort::sort, faster by 9.73%
Equal Distrib       10000000   200.0666                            218.6362                            Winner: custom.sorts.CustomSort::sort, faster by 8.49%
Unequal Distrib     10000000   206.5393                            207.0992                            Winner: custom.sorts.CustomSort::sort, faster by 0.27%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.09                    805/1350 wins  
java.util.Arrays::parallelSort     3.73                     140/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.36% better than java.util.Arrays::parallelSort     



iteration 36/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8860                              1.9117                              Winner: custom.sorts.CustomSort::sort, faster by 1.35%
Random Narrow       100000     1.7078                              1.9825                              Winner: custom.sorts.CustomSort::sort, faster by 13.85%
Nearly Sorted       100000     0.7462                              0.7534                              Winner: custom.sorts.CustomSort::sort, faster by 0.95%
Reverse Sorted      100000     0.1383                              0.1596                              Winner: custom.sorts.CustomSort::sort, faster by 13.40%
High Variance       100000     1.6520                              1.9154                              Winner: custom.sorts.CustomSort::sort, faster by 13.75%
Small Numbers       100000     1.7314                              2.0057                              Winner: custom.sorts.CustomSort::sort, faster by 13.67%
Large Numbers       100000     1.6417                              1.7315                              Winner: custom.sorts.CustomSort::sort, faster by 5.19%
Equal Distrib       100000     1.7379                              1.7976                              Winner: custom.sorts.CustomSort::sort, faster by 3.32%
Unequal Distrib     100000     1.6830                              1.7567                              Winner: custom.sorts.CustomSort::sort, faster by 4.19%
Random Wide         1000000    18.8664                             18.8029                             Winner: java.util.Arrays::parallelSort, faster by 0.34%
Random Narrow       1000000    17.6629                             19.2284                             Winner: custom.sorts.CustomSort::sort, faster by 8.14%
Nearly Sorted       1000000    6.8584                              8.1078                              Winner: custom.sorts.CustomSort::sort, faster by 15.41%
Reverse Sorted      1000000    0.8417                              1.6012                              Winner: custom.sorts.CustomSort::sort, faster by 47.44%
High Variance       1000000    19.1056                             20.0979                             Winner: custom.sorts.CustomSort::sort, faster by 4.94%
Small Numbers       1000000    18.4331                             19.1319                             Winner: custom.sorts.CustomSort::sort, faster by 3.65%
Large Numbers       1000000    18.8352                             20.6178                             Winner: custom.sorts.CustomSort::sort, faster by 8.65%
Equal Distrib       1000000    18.8108                             19.3518                             Winner: custom.sorts.CustomSort::sort, faster by 2.80%
Unequal Distrib     1000000    18.2078                             20.1629                             Winner: custom.sorts.CustomSort::sort, faster by 9.70%
Random Wide         10000000   200.2952                            201.8027                            Winner: custom.sorts.CustomSort::sort, faster by 0.75%
Random Narrow       10000000   195.6153                            227.7660                            Winner: custom.sorts.CustomSort::sort, faster by 14.12%
Nearly Sorted       10000000   75.2032                             97.3839                             Winner: custom.sorts.CustomSort::sort, faster by 22.78%
Reverse Sorted      10000000   7.7739                              14.4397                             Winner: custom.sorts.CustomSort::sort, faster by 46.16%
High Variance       10000000   199.9333                            214.9647                            Winner: custom.sorts.CustomSort::sort, faster by 6.99%
Small Numbers       10000000   205.7575                            216.5223                            Winner: custom.sorts.CustomSort::sort, faster by 4.97%
Large Numbers       10000000   234.6602                            220.5305                            Winner: java.util.Arrays::parallelSort, faster by 6.02%
Equal Distrib       10000000   227.0882                            215.7846                            Winner: java.util.Arrays::parallelSort, faster by 4.98%
Unequal Distrib     10000000   205.9611                            220.6046                            Winner: custom.sorts.CustomSort::sort, faster by 6.64%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.07                    829/1350 wins  
java.util.Arrays::parallelSort     3.73                     143/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.34% better than java.util.Arrays::parallelSort     



iteration 37/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9187                              1.9346                              Winner: custom.sorts.CustomSort::sort, faster by 0.82%
Random Narrow       100000     1.9132                              2.0317                              Winner: custom.sorts.CustomSort::sort, faster by 5.84%
Nearly Sorted       100000     0.7391                              0.7814                              Winner: custom.sorts.CustomSort::sort, faster by 5.42%
Reverse Sorted      100000     0.1473                              0.1704                              Winner: custom.sorts.CustomSort::sort, faster by 13.54%
High Variance       100000     1.6836                              1.8305                              Winner: custom.sorts.CustomSort::sort, faster by 8.03%
Small Numbers       100000     1.8291                              1.7261                              Winner: java.util.Arrays::parallelSort, faster by 5.63%
Large Numbers       100000     1.6843                              1.8315                              Winner: custom.sorts.CustomSort::sort, faster by 8.04%
Equal Distrib       100000     1.7978                              1.9066                              Winner: custom.sorts.CustomSort::sort, faster by 5.71%
Unequal Distrib     100000     1.8246                              1.9149                              Winner: custom.sorts.CustomSort::sort, faster by 4.71%
Random Wide         1000000    19.7103                             20.0126                             Winner: custom.sorts.CustomSort::sort, faster by 1.51%
Random Narrow       1000000    19.7368                             20.8232                             Winner: custom.sorts.CustomSort::sort, faster by 5.22%
Nearly Sorted       1000000    6.8658                              9.2913                              Winner: custom.sorts.CustomSort::sort, faster by 26.11%
Reverse Sorted      1000000    0.8892                              1.5613                              Winner: custom.sorts.CustomSort::sort, faster by 43.05%
High Variance       1000000    17.7201                             21.0079                             Winner: custom.sorts.CustomSort::sort, faster by 15.65%
Small Numbers       1000000    21.0634                             19.8034                             Winner: java.util.Arrays::parallelSort, faster by 5.98%
Large Numbers       1000000    17.5493                             19.4835                             Winner: custom.sorts.CustomSort::sort, faster by 9.93%
Equal Distrib       1000000    18.6743                             19.3505                             Winner: custom.sorts.CustomSort::sort, faster by 3.49%
Unequal Distrib     1000000    17.3940                             18.8396                             Winner: custom.sorts.CustomSort::sort, faster by 7.67%
Random Wide         10000000   213.8617                            235.9890                            Winner: custom.sorts.CustomSort::sort, faster by 9.38%
Random Narrow       10000000   198.3716                            217.5739                            Winner: custom.sorts.CustomSort::sort, faster by 8.83%
Nearly Sorted       10000000   78.3975                             95.5538                             Winner: custom.sorts.CustomSort::sort, faster by 17.95%
Reverse Sorted      10000000   7.1271                              14.2333                             Winner: custom.sorts.CustomSort::sort, faster by 49.93%
High Variance       10000000   207.5214                            206.7298                            Winner: java.util.Arrays::parallelSort, faster by 0.38%
Small Numbers       10000000   201.9091                            214.6844                            Winner: custom.sorts.CustomSort::sort, faster by 5.95%
Large Numbers       10000000   212.5706                            206.3162                            Winner: java.util.Arrays::parallelSort, faster by 2.94%
Equal Distrib       10000000   202.1454                            211.0749                            Winner: custom.sorts.CustomSort::sort, faster by 4.23%
Unequal Distrib     10000000   225.1003                            218.2106                            Winner: java.util.Arrays::parallelSort, faster by 3.06%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.07                    851/1350 wins  
java.util.Arrays::parallelSort     3.73                     148/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.34% better than java.util.Arrays::parallelSort     



iteration 38/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8454                              1.9764                              Winner: custom.sorts.CustomSort::sort, faster by 6.63%
Random Narrow       100000     1.8866                              1.9395                              Winner: custom.sorts.CustomSort::sort, faster by 2.73%
Nearly Sorted       100000     0.7478                              0.7637                              Winner: custom.sorts.CustomSort::sort, faster by 2.09%
Reverse Sorted      100000     0.1259                              0.1571                              Winner: custom.sorts.CustomSort::sort, faster by 19.86%
High Variance       100000     1.7703                              1.8952                              Winner: custom.sorts.CustomSort::sort, faster by 6.59%
Small Numbers       100000     1.6818                              1.9123                              Winner: custom.sorts.CustomSort::sort, faster by 12.05%
Large Numbers       100000     1.6478                              1.8435                              Winner: custom.sorts.CustomSort::sort, faster by 10.62%
Equal Distrib       100000     1.7189                              1.9470                              Winner: custom.sorts.CustomSort::sort, faster by 11.71%
Unequal Distrib     100000     1.6928                              1.7604                              Winner: custom.sorts.CustomSort::sort, faster by 3.84%
Random Wide         1000000    16.7232                             19.4153                             Winner: custom.sorts.CustomSort::sort, faster by 13.87%
Random Narrow       1000000    17.7231                             18.8517                             Winner: custom.sorts.CustomSort::sort, faster by 5.99%
Nearly Sorted       1000000    7.0261                              8.1824                              Winner: custom.sorts.CustomSort::sort, faster by 14.13%
Reverse Sorted      1000000    0.8543                              1.5164                              Winner: custom.sorts.CustomSort::sort, faster by 43.66%
High Variance       1000000    19.1877                             18.9848                             Winner: java.util.Arrays::parallelSort, faster by 1.06%
Small Numbers       1000000    17.7122                             20.7561                             Winner: custom.sorts.CustomSort::sort, faster by 14.67%
Large Numbers       1000000    18.0788                             19.6140                             Winner: custom.sorts.CustomSort::sort, faster by 7.83%
Equal Distrib       1000000    17.9468                             21.2600                             Winner: custom.sorts.CustomSort::sort, faster by 15.58%
Unequal Distrib     1000000    19.5013                             21.8260                             Winner: custom.sorts.CustomSort::sort, faster by 10.65%
Random Wide         10000000   206.3020                            209.9589                            Winner: custom.sorts.CustomSort::sort, faster by 1.74%
Random Narrow       10000000   205.2149                            216.2354                            Winner: custom.sorts.CustomSort::sort, faster by 5.10%
Nearly Sorted       10000000   78.8093                             93.2726                             Winner: custom.sorts.CustomSort::sort, faster by 15.51%
Reverse Sorted      10000000   7.0747                              14.6225                             Winner: custom.sorts.CustomSort::sort, faster by 51.62%
High Variance       10000000   223.3637                            219.2770                            Winner: java.util.Arrays::parallelSort, faster by 1.83%
Small Numbers       10000000   203.1194                            216.9929                            Winner: custom.sorts.CustomSort::sort, faster by 6.39%
Large Numbers       10000000   211.7126                            216.8243                            Winner: custom.sorts.CustomSort::sort, faster by 2.36%
Equal Distrib       10000000   214.8360                            211.5696                            Winner: java.util.Arrays::parallelSort, faster by 1.52%
Unequal Distrib     10000000   221.6304                            233.0607                            Winner: custom.sorts.CustomSort::sort, faster by 4.90%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.07                    875/1350 wins  
java.util.Arrays::parallelSort     3.69                     151/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.38% better than java.util.Arrays::parallelSort     



iteration 39/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8555                              2.0281                              Winner: custom.sorts.CustomSort::sort, faster by 8.51%
Random Narrow       100000     1.8630                              2.0788                              Winner: custom.sorts.CustomSort::sort, faster by 10.38%
Nearly Sorted       100000     0.7313                              0.7855                              Winner: custom.sorts.CustomSort::sort, faster by 6.89%
Reverse Sorted      100000     0.1391                              0.1574                              Winner: custom.sorts.CustomSort::sort, faster by 11.64%
High Variance       100000     1.6596                              1.7640                              Winner: custom.sorts.CustomSort::sort, faster by 5.92%
Small Numbers       100000     1.8869                              2.0253                              Winner: custom.sorts.CustomSort::sort, faster by 6.83%
Large Numbers       100000     1.9503                              2.2523                              Winner: custom.sorts.CustomSort::sort, faster by 13.41%
Equal Distrib       100000     1.8194                              1.9712                              Winner: custom.sorts.CustomSort::sort, faster by 7.70%
Unequal Distrib     100000     1.7720                              1.8452                              Winner: custom.sorts.CustomSort::sort, faster by 3.97%
Random Wide         1000000    19.5315                             19.1780                             Winner: java.util.Arrays::parallelSort, faster by 1.81%
Random Narrow       1000000    19.2578                             18.9733                             Winner: java.util.Arrays::parallelSort, faster by 1.48%
Nearly Sorted       1000000    7.2520                              8.5401                              Winner: custom.sorts.CustomSort::sort, faster by 15.08%
Reverse Sorted      1000000    0.8754                              1.6088                              Winner: custom.sorts.CustomSort::sort, faster by 45.59%
High Variance       1000000    18.5605                             20.2977                             Winner: custom.sorts.CustomSort::sort, faster by 8.56%
Small Numbers       1000000    19.0377                             18.7136                             Winner: java.util.Arrays::parallelSort, faster by 1.70%
Large Numbers       1000000    17.9431                             20.3216                             Winner: custom.sorts.CustomSort::sort, faster by 11.70%
Equal Distrib       1000000    17.8028                             20.8955                             Winner: custom.sorts.CustomSort::sort, faster by 14.80%
Unequal Distrib     1000000    19.3802                             24.3965                             Winner: custom.sorts.CustomSort::sort, faster by 20.56%
Random Wide         10000000   213.3667                            210.0533                            Winner: java.util.Arrays::parallelSort, faster by 1.55%
Random Narrow       10000000   218.7138                            206.7401                            Winner: java.util.Arrays::parallelSort, faster by 5.47%
Nearly Sorted       10000000   76.8071                             92.5284                             Winner: custom.sorts.CustomSort::sort, faster by 16.99%
Reverse Sorted      10000000   7.1093                              14.0977                             Winner: custom.sorts.CustomSort::sort, faster by 49.57%
High Variance       10000000   235.5755                            216.9645                            Winner: java.util.Arrays::parallelSort, faster by 7.90%
Small Numbers       10000000   214.0894                            217.4185                            Winner: custom.sorts.CustomSort::sort, faster by 1.53%
Large Numbers       10000000   209.1185                            210.3887                            Winner: custom.sorts.CustomSort::sort, faster by 0.60%
Equal Distrib       10000000   209.9905                            221.2407                            Winner: custom.sorts.CustomSort::sort, faster by 5.09%
Unequal Distrib     10000000   218.4626                            225.9220                            Winner: custom.sorts.CustomSort::sort, faster by 3.30%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.09                    896/1350 wins  
java.util.Arrays::parallelSort     3.67                     157/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.41% better than java.util.Arrays::parallelSort     



iteration 40/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9463                              1.9674                              Winner: custom.sorts.CustomSort::sort, faster by 1.07%
Random Narrow       100000     1.7812                              1.9536                              Winner: custom.sorts.CustomSort::sort, faster by 8.83%
Nearly Sorted       100000     0.7055                              0.7583                              Winner: custom.sorts.CustomSort::sort, faster by 6.97%
Reverse Sorted      100000     0.1358                              0.1564                              Winner: custom.sorts.CustomSort::sort, faster by 13.17%
High Variance       100000     1.8144                              1.8442                              Winner: custom.sorts.CustomSort::sort, faster by 1.61%
Small Numbers       100000     1.7334                              1.9148                              Winner: custom.sorts.CustomSort::sort, faster by 9.48%
Large Numbers       100000     1.6929                              1.8892                              Winner: custom.sorts.CustomSort::sort, faster by 10.39%
Equal Distrib       100000     1.7100                              1.8873                              Winner: custom.sorts.CustomSort::sort, faster by 9.39%
Unequal Distrib     100000     1.8242                              1.7350                              Winner: java.util.Arrays::parallelSort, faster by 4.89%
Random Wide         1000000    19.8677                             21.0320                             Winner: custom.sorts.CustomSort::sort, faster by 5.54%
Random Narrow       1000000    19.2894                             19.5828                             Winner: custom.sorts.CustomSort::sort, faster by 1.50%
Nearly Sorted       1000000    6.9533                              8.1450                              Winner: custom.sorts.CustomSort::sort, faster by 14.63%
Reverse Sorted      1000000    0.9342                              1.5057                              Winner: custom.sorts.CustomSort::sort, faster by 37.95%
High Variance       1000000    18.6264                             18.8932                             Winner: custom.sorts.CustomSort::sort, faster by 1.41%
Small Numbers       1000000    20.2437                             21.6577                             Winner: custom.sorts.CustomSort::sort, faster by 6.53%
Large Numbers       1000000    18.3597                             19.4535                             Winner: custom.sorts.CustomSort::sort, faster by 5.62%
Equal Distrib       1000000    17.8619                             19.5936                             Winner: custom.sorts.CustomSort::sort, faster by 8.84%
Unequal Distrib     1000000    17.9186                             20.3634                             Winner: custom.sorts.CustomSort::sort, faster by 12.01%
Random Wide         10000000   218.1014                            205.4669                            Winner: java.util.Arrays::parallelSort, faster by 5.79%
Random Narrow       10000000   195.7469                            216.7326                            Winner: custom.sorts.CustomSort::sort, faster by 9.68%
Nearly Sorted       10000000   77.2845                             93.9233                             Winner: custom.sorts.CustomSort::sort, faster by 17.72%
Reverse Sorted      10000000   6.9240                              14.4495                             Winner: custom.sorts.CustomSort::sort, faster by 52.08%
High Variance       10000000   205.6640                            218.7635                            Winner: custom.sorts.CustomSort::sort, faster by 5.99%
Small Numbers       10000000   219.4818                            225.6734                            Winner: custom.sorts.CustomSort::sort, faster by 2.74%
Large Numbers       10000000   207.4031                            207.4380                            Winner: custom.sorts.CustomSort::sort, faster by 0.02%
Equal Distrib       10000000   215.6568                            208.5823                            Winner: java.util.Arrays::parallelSort, faster by 3.28%
Unequal Distrib     10000000   208.5765                            221.2233                            Winner: custom.sorts.CustomSort::sort, faster by 5.72%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.04                    920/1350 wins  
java.util.Arrays::parallelSort     3.69                     160/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.35% better than java.util.Arrays::parallelSort     



iteration 41/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     2.0034                              1.8600                              Winner: java.util.Arrays::parallelSort, faster by 7.16%
Random Narrow       100000     1.9968                              1.9538                              Winner: java.util.Arrays::parallelSort, faster by 2.15%
Nearly Sorted       100000     0.7381                              0.8122                              Winner: custom.sorts.CustomSort::sort, faster by 9.13%
Reverse Sorted      100000     0.1478                              0.1577                              Winner: custom.sorts.CustomSort::sort, faster by 6.28%
High Variance       100000     1.8655                              1.9279                              Winner: custom.sorts.CustomSort::sort, faster by 3.24%
Small Numbers       100000     1.8898                              1.9375                              Winner: custom.sorts.CustomSort::sort, faster by 2.46%
Large Numbers       100000     1.8022                              2.0886                              Winner: custom.sorts.CustomSort::sort, faster by 13.71%
Equal Distrib       100000     1.8254                              1.9527                              Winner: custom.sorts.CustomSort::sort, faster by 6.52%
Unequal Distrib     100000     1.7324                              1.8324                              Winner: custom.sorts.CustomSort::sort, faster by 5.46%
Random Wide         1000000    17.7130                             20.8869                             Winner: custom.sorts.CustomSort::sort, faster by 15.20%
Random Narrow       1000000    20.0274                             19.9582                             Winner: java.util.Arrays::parallelSort, faster by 0.35%
Nearly Sorted       1000000    7.0251                              8.3755                              Winner: custom.sorts.CustomSort::sort, faster by 16.12%
Reverse Sorted      1000000    0.9164                              1.5058                              Winner: custom.sorts.CustomSort::sort, faster by 39.14%
High Variance       1000000    20.0976                             21.1100                             Winner: custom.sorts.CustomSort::sort, faster by 4.80%
Small Numbers       1000000    17.7396                             20.2280                             Winner: custom.sorts.CustomSort::sort, faster by 12.30%
Large Numbers       1000000    21.6413                             20.3119                             Winner: java.util.Arrays::parallelSort, faster by 6.14%
Equal Distrib       1000000    17.5807                             20.7479                             Winner: custom.sorts.CustomSort::sort, faster by 15.27%
Unequal Distrib     1000000    20.1665                             19.3801                             Winner: java.util.Arrays::parallelSort, faster by 3.90%
Random Wide         10000000   202.2033                            215.6374                            Winner: custom.sorts.CustomSort::sort, faster by 6.23%
Random Narrow       10000000   225.8998                            218.4213                            Winner: java.util.Arrays::parallelSort, faster by 3.31%
Nearly Sorted       10000000   78.0046                             92.3160                             Winner: custom.sorts.CustomSort::sort, faster by 15.50%
Reverse Sorted      10000000   7.1135                              14.4604                             Winner: custom.sorts.CustomSort::sort, faster by 50.81%
High Variance       10000000   204.2803                            205.1562                            Winner: custom.sorts.CustomSort::sort, faster by 0.43%
Small Numbers       10000000   213.7270                            209.4232                            Winner: java.util.Arrays::parallelSort, faster by 2.01%
Large Numbers       10000000   200.8658                            216.2399                            Winner: custom.sorts.CustomSort::sort, faster by 7.11%
Equal Distrib       10000000   209.9367                            205.2400                            Winner: java.util.Arrays::parallelSort, faster by 2.24%
Unequal Distrib     10000000   193.7382                            211.1262                            Winner: custom.sorts.CustomSort::sort, faster by 8.24%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.05                    939/1350 wins  
java.util.Arrays::parallelSort     3.68                     168/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.37% better than java.util.Arrays::parallelSort     



iteration 42/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8781                              2.0486                              Winner: custom.sorts.CustomSort::sort, faster by 8.32%
Random Narrow       100000     1.7846                              1.8810                              Winner: custom.sorts.CustomSort::sort, faster by 5.12%
Nearly Sorted       100000     0.7442                              0.7485                              Winner: custom.sorts.CustomSort::sort, faster by 0.58%
Reverse Sorted      100000     0.1346                              0.1566                              Winner: custom.sorts.CustomSort::sort, faster by 14.05%
High Variance       100000     1.6633                              1.7576                              Winner: custom.sorts.CustomSort::sort, faster by 5.37%
Small Numbers       100000     1.6721                              1.7650                              Winner: custom.sorts.CustomSort::sort, faster by 5.27%
Large Numbers       100000     1.6826                              1.8436                              Winner: custom.sorts.CustomSort::sort, faster by 8.73%
Equal Distrib       100000     1.6680                              1.7466                              Winner: custom.sorts.CustomSort::sort, faster by 4.50%
Unequal Distrib     100000     1.8079                              1.8541                              Winner: custom.sorts.CustomSort::sort, faster by 2.49%
Random Wide         1000000    18.9594                             18.8268                             Winner: java.util.Arrays::parallelSort, faster by 0.70%
Random Narrow       1000000    19.2446                             18.8003                             Winner: java.util.Arrays::parallelSort, faster by 2.31%
Nearly Sorted       1000000    6.7576                              8.0750                              Winner: custom.sorts.CustomSort::sort, faster by 16.31%
Reverse Sorted      1000000    0.9093                              1.5176                              Winner: custom.sorts.CustomSort::sort, faster by 40.08%
High Variance       1000000    18.5920                             19.2304                             Winner: custom.sorts.CustomSort::sort, faster by 3.32%
Small Numbers       1000000    19.7775                             18.8187                             Winner: java.util.Arrays::parallelSort, faster by 4.85%
Large Numbers       1000000    18.5177                             20.7903                             Winner: custom.sorts.CustomSort::sort, faster by 10.93%
Equal Distrib       1000000    17.4286                             19.9855                             Winner: custom.sorts.CustomSort::sort, faster by 12.79%
Unequal Distrib     1000000    16.5841                             19.3973                             Winner: custom.sorts.CustomSort::sort, faster by 14.50%
Random Wide         10000000   197.2217                            220.2739                            Winner: custom.sorts.CustomSort::sort, faster by 10.47%
Random Narrow       10000000   199.8922                            213.2669                            Winner: custom.sorts.CustomSort::sort, faster by 6.27%
Nearly Sorted       10000000   78.4426                             91.1958                             Winner: custom.sorts.CustomSort::sort, faster by 13.98%
Reverse Sorted      10000000   6.9037                              14.1191                             Winner: custom.sorts.CustomSort::sort, faster by 51.10%
High Variance       10000000   206.2792                            214.4124                            Winner: custom.sorts.CustomSort::sort, faster by 3.79%
Small Numbers       10000000   207.2127                            218.1009                            Winner: custom.sorts.CustomSort::sort, faster by 4.99%
Large Numbers       10000000   198.5986                            203.3399                            Winner: custom.sorts.CustomSort::sort, faster by 2.33%
Equal Distrib       10000000   222.8282                            222.6426                            Winner: java.util.Arrays::parallelSort, faster by 0.08%
Unequal Distrib     10000000   207.4251                            204.1192                            Winner: java.util.Arrays::parallelSort, faster by 1.59%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.03                    961/1350 wins  
java.util.Arrays::parallelSort     3.63                     173/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.41% better than java.util.Arrays::parallelSort     



iteration 43/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9211                              1.9984                              Winner: custom.sorts.CustomSort::sort, faster by 3.87%
Random Narrow       100000     1.8346                              1.8660                              Winner: custom.sorts.CustomSort::sort, faster by 1.68%
Nearly Sorted       100000     0.7318                              0.7530                              Winner: custom.sorts.CustomSort::sort, faster by 2.82%
Reverse Sorted      100000     0.1333                              0.1586                              Winner: custom.sorts.CustomSort::sort, faster by 15.94%
High Variance       100000     1.7645                              1.9868                              Winner: custom.sorts.CustomSort::sort, faster by 11.19%
Small Numbers       100000     1.7257                              2.0873                              Winner: custom.sorts.CustomSort::sort, faster by 17.32%
Large Numbers       100000     1.7527                              1.7592                              Winner: custom.sorts.CustomSort::sort, faster by 0.37%
Equal Distrib       100000     1.6788                              1.8920                              Winner: custom.sorts.CustomSort::sort, faster by 11.27%
Unequal Distrib     100000     1.5916                              1.9748                              Winner: custom.sorts.CustomSort::sort, faster by 19.40%
Random Wide         1000000    17.3659                             18.3860                             Winner: custom.sorts.CustomSort::sort, faster by 5.55%
Random Narrow       1000000    18.6934                             21.3545                             Winner: custom.sorts.CustomSort::sort, faster by 12.46%
Nearly Sorted       1000000    6.8919                              8.0626                              Winner: custom.sorts.CustomSort::sort, faster by 14.52%
Reverse Sorted      1000000    0.8921                              1.6634                              Winner: custom.sorts.CustomSort::sort, faster by 46.37%
High Variance       1000000    18.8238                             19.0421                             Winner: custom.sorts.CustomSort::sort, faster by 1.15%
Small Numbers       1000000    18.8750                             19.0885                             Winner: custom.sorts.CustomSort::sort, faster by 1.12%
Large Numbers       1000000    18.5353                             18.4674                             Winner: java.util.Arrays::parallelSort, faster by 0.37%
Equal Distrib       1000000    18.0661                             20.0957                             Winner: custom.sorts.CustomSort::sort, faster by 10.10%
Unequal Distrib     1000000    18.2630                             19.3565                             Winner: custom.sorts.CustomSort::sort, faster by 5.65%
Random Wide         10000000   216.2306                            204.8238                            Winner: java.util.Arrays::parallelSort, faster by 5.28%
Random Narrow       10000000   217.0385                            198.2197                            Winner: java.util.Arrays::parallelSort, faster by 8.67%
Nearly Sorted       10000000   76.9088                             92.2565                             Winner: custom.sorts.CustomSort::sort, faster by 16.64%
Reverse Sorted      10000000   8.1678                              14.3583                             Winner: custom.sorts.CustomSort::sort, faster by 43.11%
High Variance       10000000   209.2314                            218.4729                            Winner: custom.sorts.CustomSort::sort, faster by 4.23%
Small Numbers       10000000   206.0456                            205.0695                            Winner: java.util.Arrays::parallelSort, faster by 0.47%
Large Numbers       10000000   210.8914                            202.6419                            Winner: java.util.Arrays::parallelSort, faster by 3.91%
Equal Distrib       10000000   214.1824                            209.0077                            Winner: java.util.Arrays::parallelSort, faster by 2.42%
Unequal Distrib     10000000   193.0076                            224.4813                            Winner: custom.sorts.CustomSort::sort, faster by 14.02%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.04                    982/1350 wins  
java.util.Arrays::parallelSort     3.62                     179/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.41% better than java.util.Arrays::parallelSort     



iteration 44/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9828                              1.9843                              Winner: custom.sorts.CustomSort::sort, faster by 0.08%
Random Narrow       100000     1.7521                              1.9288                              Winner: custom.sorts.CustomSort::sort, faster by 9.16%
Nearly Sorted       100000     0.7077                              0.7543                              Winner: custom.sorts.CustomSort::sort, faster by 6.18%
Reverse Sorted      100000     0.1328                              0.1561                              Winner: custom.sorts.CustomSort::sort, faster by 14.97%
High Variance       100000     1.8093                              1.7666                              Winner: java.util.Arrays::parallelSort, faster by 2.36%
Small Numbers       100000     1.6473                              1.8108                              Winner: custom.sorts.CustomSort::sort, faster by 9.03%
Large Numbers       100000     1.7997                              1.8011                              Winner: custom.sorts.CustomSort::sort, faster by 0.07%
Equal Distrib       100000     1.7643                              1.9136                              Winner: custom.sorts.CustomSort::sort, faster by 7.80%
Unequal Distrib     100000     1.6672                              1.7608                              Winner: custom.sorts.CustomSort::sort, faster by 5.32%
Random Wide         1000000    19.1062                             19.4918                             Winner: custom.sorts.CustomSort::sort, faster by 1.98%
Random Narrow       1000000    18.9872                             20.0313                             Winner: custom.sorts.CustomSort::sort, faster by 5.21%
Nearly Sorted       1000000    6.8958                              8.1607                              Winner: custom.sorts.CustomSort::sort, faster by 15.50%
Reverse Sorted      1000000    0.8893                              1.4902                              Winner: custom.sorts.CustomSort::sort, faster by 40.33%
High Variance       1000000    16.5575                             18.4703                             Winner: custom.sorts.CustomSort::sort, faster by 10.36%
Small Numbers       1000000    17.6924                             19.5309                             Winner: custom.sorts.CustomSort::sort, faster by 9.41%
Large Numbers       1000000    17.5707                             19.5896                             Winner: custom.sorts.CustomSort::sort, faster by 10.31%
Equal Distrib       1000000    18.9079                             18.8261                             Winner: java.util.Arrays::parallelSort, faster by 0.43%
Unequal Distrib     1000000    17.7595                             18.9518                             Winner: custom.sorts.CustomSort::sort, faster by 6.29%
Random Wide         10000000   202.1569                            211.0218                            Winner: custom.sorts.CustomSort::sort, faster by 4.20%
Random Narrow       10000000   199.8168                            206.4051                            Winner: custom.sorts.CustomSort::sort, faster by 3.19%
Nearly Sorted       10000000   77.0151                             91.1025                             Winner: custom.sorts.CustomSort::sort, faster by 15.46%
Reverse Sorted      10000000   6.8270                              14.6855                             Winner: custom.sorts.CustomSort::sort, faster by 53.51%
High Variance       10000000   206.5688                            213.7701                            Winner: custom.sorts.CustomSort::sort, faster by 3.37%
Small Numbers       10000000   191.3766                            212.3518                            Winner: custom.sorts.CustomSort::sort, faster by 9.88%
Large Numbers       10000000   217.7666                            212.3295                            Winner: java.util.Arrays::parallelSort, faster by 2.50%
Equal Distrib       10000000   209.9040                            233.4632                            Winner: custom.sorts.CustomSort::sort, faster by 10.09%
Unequal Distrib     10000000   203.7363                            222.9020                            Winner: custom.sorts.CustomSort::sort, faster by 8.60%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.01                    1006/1350 wins 
java.util.Arrays::parallelSort     3.59                     182/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.42% better than java.util.Arrays::parallelSort     



iteration 45/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9836                              2.0449                              Winner: custom.sorts.CustomSort::sort, faster by 3.00%
Random Narrow       100000     1.8216                              2.0110                              Winner: custom.sorts.CustomSort::sort, faster by 9.42%
Nearly Sorted       100000     0.7114                              0.7765                              Winner: custom.sorts.CustomSort::sort, faster by 8.38%
Reverse Sorted      100000     0.1483                              0.1581                              Winner: custom.sorts.CustomSort::sort, faster by 6.22%
High Variance       100000     1.7346                              1.8815                              Winner: custom.sorts.CustomSort::sort, faster by 7.81%
Small Numbers       100000     1.6695                              1.8448                              Winner: custom.sorts.CustomSort::sort, faster by 9.50%
Large Numbers       100000     1.6449                              1.8699                              Winner: custom.sorts.CustomSort::sort, faster by 12.03%
Equal Distrib       100000     1.8021                              1.7674                              Winner: java.util.Arrays::parallelSort, faster by 1.93%
Unequal Distrib     100000     1.6917                              1.7599                              Winner: custom.sorts.CustomSort::sort, faster by 3.87%
Random Wide         1000000    18.9117                             19.1893                             Winner: custom.sorts.CustomSort::sort, faster by 1.45%
Random Narrow       1000000    17.8191                             19.7008                             Winner: custom.sorts.CustomSort::sort, faster by 9.55%
Nearly Sorted       1000000    6.8034                              8.1095                              Winner: custom.sorts.CustomSort::sort, faster by 16.11%
Reverse Sorted      1000000    0.8999                              1.7196                              Winner: custom.sorts.CustomSort::sort, faster by 47.67%
High Variance       1000000    19.1454                             20.1423                             Winner: custom.sorts.CustomSort::sort, faster by 4.95%
Small Numbers       1000000    17.8043                             19.7569                             Winner: custom.sorts.CustomSort::sort, faster by 9.88%
Large Numbers       1000000    18.3152                             19.9558                             Winner: custom.sorts.CustomSort::sort, faster by 8.22%
Equal Distrib       1000000    19.0698                             18.5013                             Winner: java.util.Arrays::parallelSort, faster by 2.98%
Unequal Distrib     1000000    17.0041                             18.9325                             Winner: custom.sorts.CustomSort::sort, faster by 10.19%
Random Wide         10000000   217.8049                            203.7420                            Winner: java.util.Arrays::parallelSort, faster by 6.46%
Random Narrow       10000000   206.5592                            208.2493                            Winner: custom.sorts.CustomSort::sort, faster by 0.81%
Nearly Sorted       10000000   79.3306                             92.9400                             Winner: custom.sorts.CustomSort::sort, faster by 14.64%
Reverse Sorted      10000000   6.8836                              14.4880                             Winner: custom.sorts.CustomSort::sort, faster by 52.49%
High Variance       10000000   213.5133                            209.8266                            Winner: java.util.Arrays::parallelSort, faster by 1.73%
Small Numbers       10000000   202.2015                            205.2058                            Winner: custom.sorts.CustomSort::sort, faster by 1.46%
Large Numbers       10000000   198.7484                            222.7958                            Winner: custom.sorts.CustomSort::sort, faster by 10.79%
Equal Distrib       10000000   214.9225                            212.8070                            Winner: java.util.Arrays::parallelSort, faster by 0.98%
Unequal Distrib     10000000   215.0459                            222.2859                            Winner: custom.sorts.CustomSort::sort, faster by 3.26%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.00                    1028/1350 wins 
java.util.Arrays::parallelSort     3.57                     187/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.43% better than java.util.Arrays::parallelSort     



iteration 46/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.7624                              2.0473                              Winner: custom.sorts.CustomSort::sort, faster by 13.92%
Random Narrow       100000     1.7820                              1.8879                              Winner: custom.sorts.CustomSort::sort, faster by 5.61%
Nearly Sorted       100000     0.7540                              0.7622                              Winner: custom.sorts.CustomSort::sort, faster by 1.08%
Reverse Sorted      100000     0.1586                              0.1602                              Winner: custom.sorts.CustomSort::sort, faster by 1.03%
High Variance       100000     1.7052                              1.7143                              Winner: custom.sorts.CustomSort::sort, faster by 0.53%
Small Numbers       100000     1.7778                              1.7883                              Winner: custom.sorts.CustomSort::sort, faster by 0.59%
Large Numbers       100000     1.6778                              1.8699                              Winner: custom.sorts.CustomSort::sort, faster by 10.27%
Equal Distrib       100000     1.8362                              1.8643                              Winner: custom.sorts.CustomSort::sort, faster by 1.51%
Unequal Distrib     100000     1.6692                              1.8429                              Winner: custom.sorts.CustomSort::sort, faster by 9.43%
Random Wide         1000000    17.8938                             19.1043                             Winner: custom.sorts.CustomSort::sort, faster by 6.34%
Random Narrow       1000000    17.5945                             18.7612                             Winner: custom.sorts.CustomSort::sort, faster by 6.22%
Nearly Sorted       1000000    6.8687                              8.2464                              Winner: custom.sorts.CustomSort::sort, faster by 16.71%
Reverse Sorted      1000000    0.9363                              1.6594                              Winner: custom.sorts.CustomSort::sort, faster by 43.57%
High Variance       1000000    17.2379                             20.2931                             Winner: custom.sorts.CustomSort::sort, faster by 15.06%
Small Numbers       1000000    16.8902                             19.3052                             Winner: custom.sorts.CustomSort::sort, faster by 12.51%
Large Numbers       1000000    18.8957                             19.7644                             Winner: custom.sorts.CustomSort::sort, faster by 4.40%
Equal Distrib       1000000    17.3938                             20.1411                             Winner: custom.sorts.CustomSort::sort, faster by 13.64%
Unequal Distrib     1000000    17.2317                             19.4212                             Winner: custom.sorts.CustomSort::sort, faster by 11.27%
Random Wide         10000000   210.6314                            208.5569                            Winner: java.util.Arrays::parallelSort, faster by 0.98%
Random Narrow       10000000   202.3239                            209.0765                            Winner: custom.sorts.CustomSort::sort, faster by 3.23%
Nearly Sorted       10000000   75.6039                             89.7695                             Winner: custom.sorts.CustomSort::sort, faster by 15.78%
Reverse Sorted      10000000   6.9324                              14.4192                             Winner: custom.sorts.CustomSort::sort, faster by 51.92%
High Variance       10000000   191.9286                            221.6328                            Winner: custom.sorts.CustomSort::sort, faster by 13.40%
Small Numbers       10000000   208.9793                            214.6212                            Winner: custom.sorts.CustomSort::sort, faster by 2.63%
Large Numbers       10000000   202.3480                            204.8378                            Winner: custom.sorts.CustomSort::sort, faster by 1.22%
Equal Distrib       10000000   214.3676                            213.8152                            Winner: java.util.Arrays::parallelSort, faster by 0.26%
Unequal Distrib     10000000   209.1638                            216.7315                            Winner: custom.sorts.CustomSort::sort, faster by 3.49%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      11.96                    1053/1350 wins 
java.util.Arrays::parallelSort     3.54                     189/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.42% better than java.util.Arrays::parallelSort     



iteration 47/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8584                              2.1002                              Winner: custom.sorts.CustomSort::sort, faster by 11.52%
Random Narrow       100000     1.9267                              1.8764                              Winner: java.util.Arrays::parallelSort, faster by 2.61%
Nearly Sorted       100000     0.7100                              0.7767                              Winner: custom.sorts.CustomSort::sort, faster by 8.59%
Reverse Sorted      100000     0.1408                              0.1692                              Winner: custom.sorts.CustomSort::sort, faster by 16.81%
High Variance       100000     1.7820                              1.9710                              Winner: custom.sorts.CustomSort::sort, faster by 9.59%
Small Numbers       100000     1.7736                              1.7505                              Winner: java.util.Arrays::parallelSort, faster by 1.30%
Large Numbers       100000     1.5860                              1.8079                              Winner: custom.sorts.CustomSort::sort, faster by 12.28%
Equal Distrib       100000     1.7223                              1.8870                              Winner: custom.sorts.CustomSort::sort, faster by 8.73%
Unequal Distrib     100000     1.6753                              1.9026                              Winner: custom.sorts.CustomSort::sort, faster by 11.95%
Random Wide         1000000    18.6563                             18.3510                             Winner: java.util.Arrays::parallelSort, faster by 1.64%
Random Narrow       1000000    17.7445                             17.9706                             Winner: custom.sorts.CustomSort::sort, faster by 1.26%
Nearly Sorted       1000000    6.9122                              8.0420                              Winner: custom.sorts.CustomSort::sort, faster by 14.05%
Reverse Sorted      1000000    0.8824                              1.6072                              Winner: custom.sorts.CustomSort::sort, faster by 45.10%
High Variance       1000000    18.1634                             18.7305                             Winner: custom.sorts.CustomSort::sort, faster by 3.03%
Small Numbers       1000000    17.8866                             20.7560                             Winner: custom.sorts.CustomSort::sort, faster by 13.82%
Large Numbers       1000000    18.1509                             18.8946                             Winner: custom.sorts.CustomSort::sort, faster by 3.94%
Equal Distrib       1000000    18.5533                             20.5564                             Winner: custom.sorts.CustomSort::sort, faster by 9.74%
Unequal Distrib     1000000    16.8757                             18.3664                             Winner: custom.sorts.CustomSort::sort, faster by 8.12%
Random Wide         10000000   192.8228                            222.6608                            Winner: custom.sorts.CustomSort::sort, faster by 13.40%
Random Narrow       10000000   205.2723                            227.0137                            Winner: custom.sorts.CustomSort::sort, faster by 9.58%
Nearly Sorted       10000000   79.3320                             88.6938                             Winner: custom.sorts.CustomSort::sort, faster by 10.56%
Reverse Sorted      10000000   6.8519                              14.2879                             Winner: custom.sorts.CustomSort::sort, faster by 52.04%
High Variance       10000000   218.0208                            207.0036                            Winner: java.util.Arrays::parallelSort, faster by 5.05%
Small Numbers       10000000   204.5634                            229.0158                            Winner: custom.sorts.CustomSort::sort, faster by 10.68%
Large Numbers       10000000   215.9583                            208.3909                            Winner: java.util.Arrays::parallelSort, faster by 3.50%
Equal Distrib       10000000   199.1268                            215.5706                            Winner: custom.sorts.CustomSort::sort, faster by 7.63%
Unequal Distrib     10000000   215.4891                            218.4265                            Winner: custom.sorts.CustomSort::sort, faster by 1.34%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      11.98                    1075/1350 wins 
java.util.Arrays::parallelSort     3.52                     194/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.46% better than java.util.Arrays::parallelSort     



iteration 48/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9079                              1.8948                              Winner: java.util.Arrays::parallelSort, faster by 0.68%
Random Narrow       100000     1.8242                              2.0059                              Winner: custom.sorts.CustomSort::sort, faster by 9.06%
Nearly Sorted       100000     0.7249                              0.7642                              Winner: custom.sorts.CustomSort::sort, faster by 5.14%
Reverse Sorted      100000     0.1327                              0.1568                              Winner: custom.sorts.CustomSort::sort, faster by 15.37%
High Variance       100000     1.7065                              1.9931                              Winner: custom.sorts.CustomSort::sort, faster by 14.38%
Small Numbers       100000     1.7631                              1.7995                              Winner: custom.sorts.CustomSort::sort, faster by 2.02%
Large Numbers       100000     1.6609                              1.8817                              Winner: custom.sorts.CustomSort::sort, faster by 11.74%
Equal Distrib       100000     1.7901                              1.8113                              Winner: custom.sorts.CustomSort::sort, faster by 1.17%
Unequal Distrib     100000     1.6688                              1.9573                              Winner: custom.sorts.CustomSort::sort, faster by 14.74%
Random Wide         1000000    18.0899                             20.3912                             Winner: custom.sorts.CustomSort::sort, faster by 11.29%
Random Narrow       1000000    17.8870                             19.4606                             Winner: custom.sorts.CustomSort::sort, faster by 8.09%
Nearly Sorted       1000000    6.9440                              8.2840                              Winner: custom.sorts.CustomSort::sort, faster by 16.18%
Reverse Sorted      1000000    0.9040                              1.5300                              Winner: custom.sorts.CustomSort::sort, faster by 40.92%
High Variance       1000000    18.3259                             18.7846                             Winner: custom.sorts.CustomSort::sort, faster by 2.44%
Small Numbers       1000000    17.2879                             19.6924                             Winner: custom.sorts.CustomSort::sort, faster by 12.21%
Large Numbers       1000000    18.7469                             19.8189                             Winner: custom.sorts.CustomSort::sort, faster by 5.41%
Equal Distrib       1000000    17.7862                             19.5868                             Winner: custom.sorts.CustomSort::sort, faster by 9.19%
Unequal Distrib     1000000    18.5354                             21.2497                             Winner: custom.sorts.CustomSort::sort, faster by 12.77%
Random Wide         10000000   201.5849                            209.9219                            Winner: custom.sorts.CustomSort::sort, faster by 3.97%
Random Narrow       10000000   191.8083                            226.2960                            Winner: custom.sorts.CustomSort::sort, faster by 15.24%
Nearly Sorted       10000000   77.5631                             91.2585                             Winner: custom.sorts.CustomSort::sort, faster by 15.01%
Reverse Sorted      10000000   7.2511                              14.1308                             Winner: custom.sorts.CustomSort::sort, faster by 48.69%
High Variance       10000000   216.1082                            210.2634                            Winner: java.util.Arrays::parallelSort, faster by 2.70%
Small Numbers       10000000   195.7898                            203.9787                            Winner: custom.sorts.CustomSort::sort, faster by 4.01%
Large Numbers       10000000   201.8861                            202.6119                            Winner: custom.sorts.CustomSort::sort, faster by 0.36%
Equal Distrib       10000000   217.2199                            209.8893                            Winner: java.util.Arrays::parallelSort, faster by 3.37%
Unequal Distrib     10000000   198.2215                            214.0380                            Winner: custom.sorts.CustomSort::sort, faster by 7.39%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      11.98                    1099/1350 wins 
java.util.Arrays::parallelSort     3.50                     197/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.48% better than java.util.Arrays::parallelSort     



iteration 49/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.9783                              1.9196                              Winner: java.util.Arrays::parallelSort, faster by 2.97%
Random Narrow       100000     1.8578                              1.8369                              Winner: java.util.Arrays::parallelSort, faster by 1.13%
Nearly Sorted       100000     0.7019                              0.7570                              Winner: custom.sorts.CustomSort::sort, faster by 7.27%
Reverse Sorted      100000     0.1516                              0.1617                              Winner: custom.sorts.CustomSort::sort, faster by 6.21%
High Variance       100000     1.7333                              2.0382                              Winner: custom.sorts.CustomSort::sort, faster by 14.96%
Small Numbers       100000     1.6623                              1.8582                              Winner: custom.sorts.CustomSort::sort, faster by 10.54%
Large Numbers       100000     1.7248                              1.8490                              Winner: custom.sorts.CustomSort::sort, faster by 6.72%
Equal Distrib       100000     1.6857                              1.8717                              Winner: custom.sorts.CustomSort::sort, faster by 9.94%
Unequal Distrib     100000     1.6564                              1.8669                              Winner: custom.sorts.CustomSort::sort, faster by 11.28%
Random Wide         1000000    18.4024                             19.6745                             Winner: custom.sorts.CustomSort::sort, faster by 6.47%
Random Narrow       1000000    17.8295                             19.2201                             Winner: custom.sorts.CustomSort::sort, faster by 7.24%
Nearly Sorted       1000000    6.8594                              8.0526                              Winner: custom.sorts.CustomSort::sort, faster by 14.82%
Reverse Sorted      1000000    0.8599                              1.4477                              Winner: custom.sorts.CustomSort::sort, faster by 40.60%
High Variance       1000000    18.0232                             20.4846                             Winner: custom.sorts.CustomSort::sort, faster by 12.02%
Small Numbers       1000000    18.4828                             19.5676                             Winner: custom.sorts.CustomSort::sort, faster by 5.54%
Large Numbers       1000000    17.7581                             20.2395                             Winner: custom.sorts.CustomSort::sort, faster by 12.26%
Equal Distrib       1000000    19.1150                             19.6302                             Winner: custom.sorts.CustomSort::sort, faster by 2.62%
Unequal Distrib     1000000    17.5176                             18.8933                             Winner: custom.sorts.CustomSort::sort, faster by 7.28%
Random Wide         10000000   213.9417                            226.0880                            Winner: custom.sorts.CustomSort::sort, faster by 5.37%
Random Narrow       10000000   211.7093                            212.5039                            Winner: custom.sorts.CustomSort::sort, faster by 0.37%
Nearly Sorted       10000000   76.2349                             91.0004                             Winner: custom.sorts.CustomSort::sort, faster by 16.23%
Reverse Sorted      10000000   6.6344                              14.2061                             Winner: custom.sorts.CustomSort::sort, faster by 53.30%
High Variance       10000000   193.8842                            225.3045                            Winner: custom.sorts.CustomSort::sort, faster by 13.95%
Small Numbers       10000000   205.8506                            210.2022                            Winner: custom.sorts.CustomSort::sort, faster by 2.07%
Large Numbers       10000000   185.8166                            205.8118                            Winner: custom.sorts.CustomSort::sort, faster by 9.72%
Equal Distrib       10000000   210.9763                            223.3387                            Winner: custom.sorts.CustomSort::sort, faster by 5.54%
Unequal Distrib     10000000   201.7091                            196.8645                            Winner: java.util.Arrays::parallelSort, faster by 2.40%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      11.98                    1123/1350 wins 
java.util.Arrays::parallelSort     3.48                     200/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.50% better than java.util.Arrays::parallelSort     



iteration 50/50

ArrayType           Length    custom.sorts.CustomSort::sort      java.util.Arrays::parallelSort     
------------------------------------------------------------------------------------------------------------------------------------------------------
Random Wide         100000     1.8520                              2.1215                              Winner: custom.sorts.CustomSort::sort, faster by 12.70%
Random Narrow       100000     1.7348                              2.0464                              Winner: custom.sorts.CustomSort::sort, faster by 15.23%
Nearly Sorted       100000     0.7336                              0.7564                              Winner: custom.sorts.CustomSort::sort, faster by 3.01%
Reverse Sorted      100000     0.1347                              0.1597                              Winner: custom.sorts.CustomSort::sort, faster by 15.61%
High Variance       100000     1.7004                              1.7897                              Winner: custom.sorts.CustomSort::sort, faster by 4.99%
Small Numbers       100000     1.7290                              1.7528                              Winner: custom.sorts.CustomSort::sort, faster by 1.36%
Large Numbers       100000     1.7407                              1.7290                              Winner: java.util.Arrays::parallelSort, faster by 0.67%
Equal Distrib       100000     1.7342                              1.8507                              Winner: custom.sorts.CustomSort::sort, faster by 6.29%
Unequal Distrib     100000     1.7108                              1.8785                              Winner: custom.sorts.CustomSort::sort, faster by 8.93%
Random Wide         1000000    18.3769                             19.9152                             Winner: custom.sorts.CustomSort::sort, faster by 7.72%
Random Narrow       1000000    21.1768                             19.6295                             Winner: java.util.Arrays::parallelSort, faster by 7.31%
Nearly Sorted       1000000    6.7111                              8.1643                              Winner: custom.sorts.CustomSort::sort, faster by 17.80%
Reverse Sorted      1000000    0.9076                              1.5214                              Winner: custom.sorts.CustomSort::sort, faster by 40.35%
High Variance       1000000    16.8551                             20.0510                             Winner: custom.sorts.CustomSort::sort, faster by 15.94%
Small Numbers       1000000    17.6550                             20.2249                             Winner: custom.sorts.CustomSort::sort, faster by 12.71%
Large Numbers       1000000    19.2746                             20.2435                             Winner: custom.sorts.CustomSort::sort, faster by 4.79%
Equal Distrib       1000000    18.3074                             19.2615                             Winner: custom.sorts.CustomSort::sort, faster by 4.95%
Unequal Distrib     1000000    18.4075                             19.1620                             Winner: custom.sorts.CustomSort::sort, faster by 3.94%
Random Wide         10000000   198.0576                            223.2552                            Winner: custom.sorts.CustomSort::sort, faster by 11.29%
Random Narrow       10000000   197.4693                            221.0947                            Winner: custom.sorts.CustomSort::sort, faster by 10.69%
Nearly Sorted       10000000   76.9559                             93.2924                             Winner: custom.sorts.CustomSort::sort, faster by 17.51%
Reverse Sorted      10000000   6.9273                              14.1224                             Winner: custom.sorts.CustomSort::sort, faster by 50.95%
High Variance       10000000   213.3195                            200.9294                            Winner: java.util.Arrays::parallelSort, faster by 5.81%
Small Numbers       10000000   213.3944                            209.5350                            Winner: java.util.Arrays::parallelSort, faster by 1.81%
Large Numbers       10000000   198.6508                            216.0209                            Winner: custom.sorts.CustomSort::sort, faster by 8.04%
Equal Distrib       10000000   217.1676                            216.3234                            Winner: java.util.Arrays::parallelSort, faster by 0.39%
Unequal Distrib     10000000   203.7543                            199.2648                            Winner: java.util.Arrays::parallelSort, faster by 2.20%



Displaying overall results...
Sorting Algorithm                  Average % Improvement    Wins           
---------------------------------------------------------------------------
custom.sorts.CustomSort::sort      12.00                    1144/1350 wins 
java.util.Arrays::parallelSort     3.47                     206/1350 wins  

Overall Winner: custom.sorts.CustomSort::sort       8.53% better than java.util.Arrays::parallelSort     

